{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\serviceProject\\\\frontend\\\\src\\\\components\\\\viewAddtocart.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react'\n// // import axios from \"axios\";\n// // import Button from 'react-bootstrap/Button';\n// // import Modal from 'react-bootstrap/Modal';\n// // import { Link } from 'react-router-dom';\n\n// // const ViewAddtocart = () => {\n// //     const [items,setItems]=useState([]);\n// //     const [show, setShow] = useState(false);\n// //     const [deleteId, setDeleteId] = useState(null);\n\n// //     const fetchData=async()=>{\n// //         try{\n// //             const response=await axios.get(\"http://localhost:5001/api/viewaddtocart\");\n// //             console.log(\"cart data\",response.data);\n// //             setItems(response.data);\n// //         }catch(err){\n// //             console.log(\"error during fetching blogs data\",err);\n// //         }\n// //     };\n// //     useEffect(()=>{\n// //         fetchData();\n// //         },[]);\n\n// //     // डिलीट करने के लिए Modal Open करें\n// //     const handleShow = (id) => {\n// //         console.log(\"Item to be deleted:\", id);\n// //         setDeleteId(id);\n// //         setShow(true);\n// //     };\n\n// //     // डिलीट कन्फर्म करें\n// //     const deleteItem = async () => {\n// //         if (!deleteId) {\n// //             console.log(\"No item selected for deletion.\");\n// //             return;\n// //         }\n\n// //         try {\n// //             console.log(\"Deleting item:\", deleteId);\n// //             await axios.delete(`http://localhost:5001/api/deleteitem/${deleteId}`);\n\n// //             // डिलीट होने के बाद UI अपडेट करें\n// //             setItems(items.filter((item) => item._id !== deleteId));\n// //             setShow(false); // Modal बंद करें\n// //         } catch (err) {\n// //             console.log(\"Error deleting item:\", err);\n// //         }\n// //     };\n\n// //   return (\n// //     <div className=\"container my-5\">\n// //     <h2 className=\"text-center mb-4\">Cart items</h2>\n// //     <div className=\"row\">\n// //         {items.map((item) => (\n// //             <div key={item._id} className=\"col-md-4 mb-4\">\n// //                 <div className=\"card h-100\">\n// //                     <img src={item.smallsubcategoryimage}  className=\"card-img-top p-5\" style={{ height: \"250px\", width: \"100%\", objectFit: \"cover\" }}  />\n// //                     <div className=\"card-body\">\n// //                     <h5 className=\"card-title\">{item.subcategoryname}</h5>\n\n// //                         <h5 className=\"card-title\">{item.smallsubcategoryname}</h5>\n// //                         <h5 className=\"card-text\">{item.Price}</h5>\n// //                         <div className=\"mb-0 d-flex  \">\n// //                             {/* <Link to={`/blogdetail/${item._id}`} className=\"btn btn-primary btn-sm\">\n\n// //                                 Read More\n// //                             </Link> */}\n// //                             <button className=\"btn btn-danger btn-sm\" onClick={() => handleShow(item._id)}>\n// //                                 Remove\n// //                             </button>\n// //                         </div>\n// //                     </div>\n// //                 </div>\n// //             </div>\n// //         ))}\n// //     </div>\n// //     {/* Delete Confirmation Modal */}\n// //     <Modal show={show} onHide={() => setShow(false)}>\n// //                 <Modal.Header closeButton>\n// //                     <Modal.Title>Confirm Delete</Modal.Title>\n// //                 </Modal.Header>\n// //                 <Modal.Body>Are you sure you want to delete this item?</Modal.Body>\n// //                 <Modal.Footer>\n// //                     <Button variant=\"secondary\" onClick={() => setShow(false)}>\n// //                         Cancel\n// //                     </Button>\n// //                     <Button variant=\"danger\" onClick={deleteItem}>\n// //                         Delete\n// //                     </Button>\n// //                 </Modal.Footer>\n// //             </Modal>\n\n// // </div>\n\n// //   )\n// // }\n\n// // export default ViewAddtocart;\n\n// import { useEffect, useState } from \"react\";\n// import { Link,useNavigate } from \"react-router-dom\";\n\n// const ViewAddtocart = () => {\n//   const [cart, setCart] = useState([]);\n//   const [cartcount, setcartcount] = useState(0); // Initialize cartcount state\n//   const [orderplaced,setorderplaced]=useState(false);\n//   const [deliveryPreference, setDeliveryPreference] = useState(\"normal\");\n//   const navigate = useNavigate();\n\n//   const email = localStorage.getItem(\"Email\") || \"guest\";\n\n// useEffect(() => {\n//   const storedCart = JSON.parse(localStorage.getItem(`cart_${email}`)) || [];\n//   setCart(storedCart);\n// }, [email]);\n\n// const updateCart = (updatedCart) => {\n//   setCart(updatedCart);\n//   localStorage.setItem(`cart_${email}`, JSON.stringify(updatedCart));\n//   localStorage.setItem(\"cartcount\", updatedCart.length);\n//   window.dispatchEvent(new Event(\"storage\"));\n// };\n\n//   const handleIncreaseQuantity = (index) => {\n//     const updatedCart = cart.map((item, i) =>\n//       i === index\n//         ? { ...item, quantity: item.quantity + 1, Price: (item.quantity + 1) * (item.Price / item.quantity) }\n//         : item\n//     );\n//     updateCart(updatedCart);\n//   };\n\n// const handleDecreaseQuantity = (index) => {\n//     const updatedCart = cart\n//       .map((item, i) => {\n//         if (i === index) {\n//           const newQuantity = item.quantity - 1;\n//           if (newQuantity === 0) return null; // Mark for removal\n//           return { \n//             ...item, \n//             quantity: newQuantity, \n//             Price: (newQuantity * (item.Price / item.quantity)).toFixed(2) \n//           };\n//         }\n//         return item;\n//       })\n//       .filter(item => item !== null); // Remove items marked as null\n\n//     updateCart(updatedCart);\n\n//     const newCartCount = updatedCart.length;  // Calculate cart count based on updatedCart length\n//     setcartcount(newCartCount);\n\n//     // Store updated cart and cart count in localStorage\n//     localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n//     localStorage.setItem(\"cartcount\", newCartCount);\n\n//     window.dispatchEvent(new Event(\"storage\"));\n\n//   };\n\n//   const handleRemoveItem = (index) => {\n//     const updatedCart = cart.filter((_, i) => i !== index);\n//     updateCart(updatedCart);\n//   };\n\n//   const handlePlaceOrder = async () => {\n//     const userId = localStorage.getItem(\"USER\");\n\n//     if (!userId || cart.length === 0) {\n//       alert(\"Invalid order data. Please log in and add items.\");\n//       return;\n//     }\n//     const extracharge=deliveryPreference===\"Fast\"? 50 :0;\n//     const finalAmount=parseFloat(totalAmount)+extracharge;\n\n//     try {\n//       const response = await fetch(\"http://localhost:5001/api/orderplaced\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           userId,\n//           cartItems: cart,\n//           totalAmount:finalAmount,\n//           deliveryPreference, // <== ADD THIS LINE\n//           userEmail:localStorage.getItem(\"Email\"),\n//         }),\n//       });\n\n//       const orderData=response.data.order;\n//       if(response.status===201 && orderData._id)\n//         const options={\n//       key=\"rzp_text_99IwqPHWTFKKXS\",\n//       amount:parseFloat(totalAmountWithDelivery)*100,\n//       currency:\"INR\",\n//       name:\"Softwizz\",\n//       description:\"Order Payment\",\n//       handler:async function (razorpayResponse){\n//         try {\n//           const paymentRes=await api.put(`http://localhost:5000/api/updatepayment/${orderData._id}`,{\n//             paymentId:razorpayResponse.razorpay_paymewnt_id,\n//             paymentStatus:\"Paid\",\n//           });\n//           if(paymentRes===200){\n//             alert(\"Paymnent successfull\")\n//                     localStorage.removeItem(`cart_${email}`);\n//         localStorage.setItem(\"cartcount\", 0);\n//         setCart([]);\n//         setcartcount(0);\n//         setorderplaced(true);\n//         window.dispatchEvent(new Event(\"storage\"));\n//         navigate(\"/\")\n//           }else{\n//             alert(\"Payment captured but failed to update order\")\n//           }\n\n//           }\n\n//         } catch (error) {\n//           console.error(\"Payment failed\",error)\n\n//         }\n//       }\n//     },\n//     prefix:{\n//       name:address,\n//       email:email,\n//       contact:\"999999999\"\n//     },\n//     theme:{\n//       color:\"#339cc\"\n//     };\n//     const rzp=new window.Razorpay(options)\n//     rzp.open()\n//   }else{\n//     alert(\"failed\")\n//   }\n//   const placeOrder = async () => {\n//     const userId = localStorage.getItem(\"USER\");\n//     navigate(`/Checkout/${userId}`, {\n//       state: {\n//         deliveryPreference,\n//         totalAmount: parseFloat(totalAmount),\n//         finalAmount: parseFloat(totalAmount) + (deliveryPreference === \"Fast\" ? 50 : 0)\n//       }\n//     });\n//   };\n\n//   const totalAmount= cart\n//   .reduce((acc, item) => acc + Number(item.Price), 0)\n//   .toFixed(2);\n\n//   return (\n//     // <div className=\"container my-5\">\n//     //   <h2 className=\"text-center mb-4\">Your Cart</h2>\n//     //   {cart.length === 0 ? (\n//     //     <p className=\"text-center\">Your cart is empty.</p>\n//     //   ) : (\n//     //     <div className=\"row\">\n//     //       {cart.map((item, index) => (\n//     //         <div key={index} className=\"col-md-4 mb-4\">\n//     //           <div className=\"card\">\n//     //             <img src={item.image} className=\"card-img-top\" alt={item.name} />\n//     //             <div className=\"card-body\">\n//     //               <h5>{item.name}</h5>\n//     //               <p>Price: ₹{item.Price}</p>\n//     //               <p>Quantity: {item.quantity}</p>\n\n//     //               <div className=\"d-flex justify-content-between\">\n//     //                 <button className=\"btn btn-sm btn-success\" onClick={() => handleIncreaseQuantity(index)}>+</button>\n//     //                 <button className=\"btn btn-sm btn-warning\" onClick={() => handleDecreaseQuantity(index)}>-</button>\n//     //                 <button className=\"btn btn-sm btn-danger\" onClick={() => handleRemoveItem(index)}>Remove</button>\n//     //               </div>\n//     //             </div>\n//     //           </div>\n//     //         </div>\n//     //       ))}\n\n//     //     </div>\n\n//     //   )}\n//     // </div>\n\n// //     <div className=\"container my-5\">\n// //   <h2 className=\"text-center mb-4\">Your Cart</h2>\n// //   {cart.length === 0 ? (\n// //     <p className=\"text-center\">Your cart is empty.</p>\n// //   ) : (\n// //     <div className=\"row\">\n\n// //       {/* t Column: Cart Items */}\n// //       <div className=\"col-md-8\">\n// //         <div className=\"row\">\n// //           {cart.map((item, index) => (\n// //             <div key={index} className=\"col-md-6 mb-4\">\n// //               <div className=\"card\">\n// //                 <img src={item.image} className=\"card-img-top\" alt={item.name} />\n// //                 <div className=\"card-body\">\n// //                   <h5>{item.name}</h5>\n// //                   <p>Price: ₹{item.Price}</p>\n// //                   <p>Quantity: {item.quantity}</p>\n\n// //                   <div className=\"d-flex justify-content-between\">\n// //                     <button className=\"btn btn-sm btn-success\" onClick={() => handleIncreaseQuantity(index)}>+</button>\n// //                     <button className=\"btn btn-sm btn-warning\" onClick={() => handleDecreaseQuantity(index)}>-</button>\n// //                     <button className=\"btn btn-sm btn-danger\" onClick={() => handleRemoveItem(index)}>Remove</button>\n// //                   </div>\n// //                 </div>\n// //               </div>\n// //             </div>\n// //           ))}\n// //         </div>\n// //       </div>\n\n// //       {/* right Column: Cart Summary */}\n\n// // <div className=\"col-md-4 mb-4\">\n// //   <div className=\"card p-3\">\n// //     <h5 className=\"mb-3\">Cart Summary</h5>\n// //     <ul className=\"list-group mb-3\">\n// //       {cart.map((item, index) => (\n// //         <li key={index} className=\"list-group-item d-flex justify-content-between\">\n// //           <span>{item.name} </span>\n// //           <span>₹{Number(item.Price).toFixed(2)}</span>\n// //         </li>\n// //       ))}\n// //     </ul>\n// //     {/* <h6 className=\"text-end\">\n// //       Total: ₹{new Intl.NumberFormat('en-IN', { minimumFractionDigits: 2 }).format(\n// //         cart.reduce((acc, item) => acc + Number(item.Price), 0)\n// //       )}\n// //     </h6> */}\n// //     <h6 className=\"text-end\">\n// //   Total: ₹{cart.reduce((acc, item) => acc + Number(item.Price), 0).toFixed(2)}\n// // </h6>\n\n// //   </div>\n// // </div>\n\n// //     </div>\n// //   )}\n// // </div>\n\n// <div className=\"container my-5\">\n//   <h2 className=\"text-center mb-4\">Your Cart</h2>\n\n//   {cart.length === 0 ? (\n//   <div className=\"text-center\">\n//   <p>{orderplaced ? \"Your order is placed.\" : \"Your cart is empty.\"}</p>\n//   <Link\n//     to=\"/past-orders\" \n//     className=\"btn btn-primary mt-2\"\n//     style={{ textDecoration: \"none\" }}\n//   >\n//     View Past Orders\n//   </Link>\n// </div>\n\n// ) : (\n\n//     <div className=\"row\">\n//       {/* Left Column: Cart Items */}\n//       <div className=\"col-md-8\">\n//         {cart.map((item, index) => (\n//           <div key={index} className=\"d-flex mb-4 border rounded p-3 shadow-sm\">\n//             {/* Image */}\n//             <img\n//               src={item.image}\n//               alt={item.name}\n//               className=\"img-fluid rounded\"\n//               style={{ width: '150px', height: '150px', objectFit: 'cover' }}\n//             />\n\n//             {/* Details */}\n//             <div className=\"ms-3 flex-grow-1\">\n//               <h5>{item.name}</h5>\n//               <p className=\"mb-1\">Price: ₹{Number(item.Price).toFixed(2)}</p>\n//               <p className=\"mb-2\">Quantity: {item.quantity}</p>\n\n// <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n//   <button\n//     style={{\n//       width: \"32px\",\n//       height: \"32px\",\n//       border: \"1px solid #c2c2c2\",\n//       backgroundColor: \"#fff\",\n//       color: \"#333\",\n//       fontSize: \"18px\",\n//       fontWeight: \"bold\",\n//       borderRadius: \"50%\",\n//       display: \"flex\",\n//       alignItems: \"center\",\n//       justifyContent: \"center\",\n//       cursor: \"pointer\",\n//     }}\n//     onMouseOver={(e) => (e.target.style.backgroundColor = \"#f8f8f8\")}\n//     onMouseOut={(e) => (e.target.style.backgroundColor = \"#fff\")}\n//     onClick={() => handleDecreaseQuantity(index)}\n//   >\n//     −\n//   </button>\n\n//   <div\n//     style={{\n//       width: \"40px\",\n//       height: \"32px\",\n//       border: \"1px solid #c2c2c2\",\n//       textAlign: \"center\",\n//       lineHeight: \"30px\",\n//       borderRadius: \"4px\",\n//       fontWeight: \"500\",\n//     }}\n//   >\n//     {item.quantity}\n//   </div>\n\n//   <button\n//     style={{\n//       width: \"32px\",\n//       height: \"32px\",\n//       border: \"1px solid #c2c2c2\",\n//       backgroundColor: \"#fff\",\n//       color: \"#333\",\n//       fontSize: \"18px\",\n//       fontWeight: \"bold\",\n//       borderRadius: \"50%\",\n//       display: \"flex\",\n//       alignItems: \"center\",\n//       justifyContent: \"center\",\n//       cursor: \"pointer\",\n//     }}\n//     onMouseOver={(e) => (e.target.style.backgroundColor = \"#f8f8f8\")}\n//     onMouseOut={(e) => (e.target.style.backgroundColor = \"#fff\")}\n//     onClick={() => handleIncreaseQuantity(index)}\n//   >\n//     +\n//   </button>\n\n//   <button\n//     className=\"btn btn-sm btn-danger ms-3\"\n//     onClick={() => handleRemoveItem(index)}\n//   >\n//     Remove\n//   </button>\n// </div>\n\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Right Column: Cart Summary */}\n//       <div className=\"col-md-4 mb-4\">\n//         <div className=\"card p-3 shadow-sm\">\n//           <h5 className=\"mb-3\">Cart Summary</h5>\n//           <ul className=\"list-group mb-3\">\n//             {cart.map((item, index) => (\n//               <li\n//                 key={index}\n//                 className=\"list-group-item d-flex justify-content-between\"\n//               >\n//                 <span>{item.name}</span>\n//                 <span>₹{Number(item.Price).toFixed(2)}</span>\n//               </li>\n//             ))}\n//           </ul>\n\n//           <div className=\"mb-3\">\n//   <label htmlFor=\"deliveryPreference\" className=\"form-label\">\n//     Delivery Preference\n//   </label>\n//   <select\n//     id=\"deliveryPreference\"\n//     className=\"form-select\"\n//     value={deliveryPreference}\n//     onChange={(e) => setDeliveryPreference(e.target.value)}\n//   >\n//     <option value=\"normal\">Normal (Free,7 Days)</option>\n//     <option value=\"Fast\">Fast (Rs.50, 2 Days)</option>\n//   </select>\n// </div>\n// <h6 className=\"text-end\">\n//             Total: ₹\n//             {(parseFloat(totalAmount)+(deliveryPreference===\"Fast\"?50:0)).toFixed(2)}\n//           </h6>\n\n//           <button\n//     style={{\n//       width: \"100%\",\n//       backgroundColor: \"#fb641b\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       borderRadius: \"2px\",\n//       padding: \"12px 0\",\n//       fontSize: \"16px\",\n//       fontWeight: \"bold\",\n//       boxShadow: \"0 1px 2px 0 rgba(0, 0, 0, 0.2)\",\n//       cursor: \"pointer\",\n//       marginTop: \"16px\"\n//     }}\n//     // onClick={handlePlaceOrder}\n//     onClick={placeOrder}\n//   >\n//     PLACE ORDER\n//   </button>\n//         </div>\n//       </div>\n//     </div>\n//   )}\n// </div>\n\n//   );\n// };\n\n// export default ViewAddtocart;\n// // import { useEffect, useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // // import \"./Addtocart.css\";\n// // import api from \"../axios\";\n\n// // const ViewAddtocart = () => {\n\n// //   const [cart, setCart] = useState([]);\n// //   const [cartcount, setCartcount] = useState(0);\n// //   const [orderplaced, setOrderPlaced] = useState(false);\n// //   const [deliveryType, setDeliveryType] = useState(\"\");\n// //   const [address, setAddress] = useState(\"\");\n// //   const [city, setCity] = useState(\"\");\n// //   const [pincode, setPincode] = useState(\"\");\n// //   const [step, setStep] = useState(0);\n\n// //   const navigate = useNavigate();\n// //   const email = localStorage.getItem(\"EMAIL\") || \"guest\";\n\n// //   // Ensure the user is logged in and is not an admin\n// //   useEffect(() => {\n// //     const user = localStorage.getItem(\"USER\");\n// //     const role = localStorage.getItem(\"Role\");\n\n// //     if (!user || role === \"admin\") {\n// //       console.log(\"Role in localStorage:\", role);  // Debugging: Check the role\n// //       alert(\"Access denied! Please login as a valid user.\");\n// //       navigate(\"/login\");\n// //     }\n// //   }, [navigate]);\n\n// //   // Load cart from localStorage on initial render\n// //   useEffect(() => {\n// //     const storedCart = JSON.parse(localStorage.getItem(`cart_${email}`)) || [];\n// //     setCart(storedCart);\n// //     setCartcount(storedCart.length);\n// //   }, [email]);\n\n// //   // Function to update cart state and localStorage\n// //   const updateCart = (updatedCart) => {\n// //     setCart(updatedCart);\n// //     setCartcount(updatedCart.length);\n// //     localStorage.setItem(`cart_${email}`, JSON.stringify(updatedCart));\n// //     localStorage.setItem(\"cartcount\", updatedCart.length);\n// //     window.dispatchEvent(new Event(\"storage\"));\n// //   };\n\n// //   // Function to increase item quantity\n// //   const handleIncreaseQuantity = (index) => {\n// //     const updatedCart = cart.map((item, i) =>\n// //       i === index\n// //         ? {\n// //             ...item,\n// //             quantity: item.quantity + 1,\n// //             Price: ((item.Price / item.quantity) * (item.quantity + 1)).toFixed(2),\n// //           }\n// //         : item\n// //     );\n// //     updateCart(updatedCart);\n// //   };\n\n// //   const handleDecreaseQuantity = (index) => {\n// //     const updatedCart = cart\n// //       .map((item, i) => {\n// //         if (i === index) {\n// //           const newQuantity = item.quantity - 1;\n// //           if (newQuantity === 0) return null;\n// //           return {\n// //             ...item,\n// //             quantity: newQuantity,\n// //             Price: (item.unitPrice * newQuantity).toFixed(2),\n// //           };\n// //         }\n// //         return item;\n// //       })\n// //       .filter((item) => item !== null);\n// //     updateCart(updatedCart);\n// //   };\n// //     // Function to remove item from cart\n// //   const handleRemoveItem = (index) => {\n// //     const updatedCart = cart.filter((_, i) => i !== index);\n// //     updateCart(updatedCart);\n// //   };\n\n// //   // Calculate total amount of the cart\n// //   const totalAmount = cart\n// //     .reduce((total, item) => total + parseFloat(item.Price), 0)\n// //     .toFixed(2);\n\n// //   // Add extra charges for fast delivery\n// //   const extracharge = deliveryType === \"Fast\" ? 50 : 0;\n// //   const totalAmountWithDelivery = (parseFloat(totalAmount) + extracharge).toFixed(2);\n\n// //   // Handle placing the order\n// //   const handlePlaceOrder = async () => {\n// //     const userId = localStorage.getItem(\"USER\");\n\n// //     if (!userId || cart.length === 0) {\n// //       alert(\"Invalid order data. Please log in and add items.\");\n// //       return;\n// //     }\n\n// //     if (!address.trim() || !city.trim() || !pincode.trim() || !deliveryType) {\n// //       alert(\"Please fill all delivery details (address, city, pincode, delivery type).\");\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await api.post(\"/orders\", {\n// //         userId,\n// //         cartItems: cart,\n// //         totalAmount: totalAmountWithDelivery,\n// //         pincode,\n// //         address,\n// //         city,\n// //         serviceDate: new Date(),\n// //         deliveryType,\n// //         userEmail: email,\n// //       });\n\n// //       const orderData = response.data.order; // ✅ FIXED HERE\n\n// //       if (response.status === 201 && orderData._id) {\n// //         const options = {\n// //           key: \"rzp_test_99IwqPHWTFKkXS\", // ✅ Use real Razorpay key in production\n// //           amount: parseFloat(totalAmountWithDelivery) * 100, // amount in paise\n// //           currency: \"INR\",\n// //           name: \"Softwizz\",\n// //           description: \"Order Payment\",\n// //           handler: async function (razorpayResponse) {\n// //             try {\n// //               const paymentRes = await api.put(`/updatepayment/${orderData._id}`, {\n// //                 paymentId: razorpayResponse.razorpay_payment_id,\n// //                 paymentStatus: \"Paid\",\n// //               });\n\n// //               if (paymentRes.status === 200) {\n// //                 alert(\"Payment Successful!\");\n// //                 localStorage.removeItem(`cart_${email}`);\n// //                 localStorage.setItem(\"cartcount\", 0);\n// //                 setCart([]);\n// //                 setCartcount(0);\n// //                 setOrderPlaced(true);\n// //                 window.dispatchEvent(new Event(\"storage\"));\n// //                 navigate(\"/\"); // ✅ Optionally redirect to a Thank You page\n// //               } else {\n// //                 alert(\"Payment captured but failed to update order.\");\n// //               }\n// //             } catch (err) {\n// //               console.error(\"Payment update failed:\", err);\n// //               alert(\"Payment succeeded but order update failed.\");\n// //             }\n// //           },\n// //           prefill: {\n// //             name: address,\n// //             email: email,\n// //             contact: \"9999999999\", // Optional\n// //           },\n// //           theme: {\n// //             color: \"#3399cc\",\n// //           },\n// //         };\n\n// //         const rzp = new window.Razorpay(options);\n// //         rzp.open();\n// //       } else {\n// //         alert(\"Failed to create order. Try again.\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Order placement error:\", error);\n// //       alert(\"Something went wrong. Please try again.\");\n// //     }\n// //   };\n// //       return (\n// //     <div className=\"addtocart-container py-5\">\n// //       {/* Step Indicators */}\n// //       <div className=\"checkout-steps mb-4\">\n// //         {[\"Cart\", \"Address\", \"Payment\", \"Summary\"].map((label, idx) => (\n// //           <div\n// //             key={idx}\n// //             className={`step ${step === idx ? \"active\" : step > idx ? \"completed\" : \"\"}`}\n// //           >\n// //             <div className=\"step-circle\">{idx + 1}</div>\n// //             <div className=\"step-label\">{label}</div>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       {/* Step 0 - Cart */}\n// //       {step === 0 && (\n// //         <div className=\"row\">\n// //           <div className=\"col-md-8\">\n// //             <h4>Your Cart</h4>\n// //             <div className=\"row\">\n// //               {cart.map((item, index) => (\n// //                 <div key={index} className=\"col-md-6 mb-4\">\n// //                   <div className=\"card cart-card shadow-sm\">\n// //                     <img\n// //                       src={item.image}\n// //                       className=\"card-img-top\"\n// //                       style={{ height: \"180px\", objectFit: \"cover\" }}\n// //                     />\n// //                     <div className=\"card-body\">\n// //                       <h5 className=\"card-title\">{item.name}</h5>\n// //                       <p className=\"card-text\">\n// //                         ₹{item.Price} × {item.quantity}\n// //                       </p>\n// //                       <div className=\"d-flex justify-content-between\">\n// //                         <button\n// //                           className=\"btn btn-success btn-sm\"\n// //                           onClick={() => handleIncreaseQuantity(index)}\n// //                         >\n// //                           +\n// //                         </button>\n// //                         <button\n// //                           className=\"btn btn-warning btn-sm text-white\"\n// //                           onClick={() => handleDecreaseQuantity(index)}\n// //                         >\n// //                           -\n// //                         </button>\n// //                         <button\n// //                           className=\"btn btn-danger btn-sm\"\n// //                           onClick={() => handleRemoveItem(index)}\n// //                         >\n// //                           Remove\n// //                         </button>\n// //                       </div>\n// //                     </div>\n// //                   </div>\n// //                 </div>\n// //               ))}\n// //             </div>\n// //           </div>\n\n// //           <div className=\"col-md-4\">\n// //             <div className=\"card p-3\">\n// //               <h5>Order Summary</h5>\n// //               <ul className=\"list-group list-group-flush\">\n// //                 {cart.map((item, idx) => (\n// //                   <li key={idx} className=\"list-group-item d-flex justify-content-between\">\n// //                     <span>{item.name} × {item.quantity}</span>\n// //                     <span>₹{item.Price}</span>\n// //                   </li>\n// //                 ))}\n// //                 <li className=\"list-group-item fw-bold d-flex justify-content-between border-top\">\n// //                   <span>Total</span>\n// //                   <span>₹{totalAmount}</span>\n// //                 </li>\n// //               </ul>\n// //               <button\n// //                 className=\"btn btn-primary mt-3 w-100\"\n// //                 disabled={cart.length === 0}\n// //                 onClick={() => setStep(1)}\n// //               >\n// //                 Continue\n// //               </button>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       )}\n\n// //       {/* Step 1 - Address */}\n// //       {step === 1 && (\n// //         <div className=\"row justify-content-center\">\n// //           <div className=\"col-md-6\">\n// //             <h4>Delivery Address</h4>\n// //             <input\n// //               className=\"form-control my-2\"\n// //               placeholder=\"Address\"\n// //               value={address}\n// //               onChange={(e) => setAddress(e.target.value)}\n// //             />\n// //             <input\n// //               className=\"form-control my-2\"\n// //               placeholder=\"City\"\n// //               value={city}\n// //               onChange={(e) => setCity(e.target.value)}\n// //             />\n// //             <input\n// //               className=\"form-control my-2\"\n// //               placeholder=\"Pincode\"\n// //               value={pincode}\n// //               onChange={(e) => setPincode(e.target.value)}\n// //             />\n// //             <select\n// //               className=\"form-control my-2\"\n// //               value={deliveryType}\n// //               onChange={(e) => setDeliveryType(e.target.value)}\n// //             >\n// //               <option value=\"\">Select Delivery Type</option>\n// //               <option value=\"Fast\">Fast (₹50, 2 Days)</option>\n// //               <option value=\"Slow\">Normal (Free, 4 Days)</option>\n// //             </select>\n\n// //             <button\n// //               className=\"btn btn-primary w-100\"\n// //               onClick={() => {\n// //                 if (address && city && pincode && deliveryType) {\n// //                   setStep(2);\n// //                 } else {\n// //                   alert(\"Please fill all fields!\");\n// //                 }\n// //               }}\n// //             >\n// //               Continue to Payment\n// //             </button>\n\n// //             <button className=\"btn btn-secondary w-100 mt-2\" onClick={() => setStep(0)}>\n// //               Back to Cart\n// //             </button>\n// //           </div>\n// //         </div>\n// //       )}\n\n// //       {/* Step 2 - Payment */}\n// //       {step === 2 && (\n// //         <div className=\"text-center\">\n// //           <h4>Payment</h4>\n// //           <p>Simulated payment method (Cash/UPI etc)</p>\n// //           <button className=\"btn btn-dark\" onClick={() => setStep(3)}>\n// //             Continue to Summary\n// //           </button>\n// //           <br />\n// //           <button className=\"btn btn-secondary mt-2\" onClick={() => setStep(1)}>\n// //             Back to Address\n// //           </button>\n// //         </div>\n// //       )}\n\n// //       {/* Step 3 - Summary */}\n// //       {step === 3 && (\n// //         <div className=\"text-center\">\n// //           <h4>Order Summary</h4>\n// //           <p>Total: ₹{totalAmountWithDelivery}</p>\n// //           <button className=\"btn btn-success\" onClick={handlePlaceOrder}>\n// //             Place Order\n// //           </button>\n// //           <br />\n// //           <button className=\"btn btn-secondary mt-2\" onClick={() => setStep(2)}>\n// //             Back to Payment\n// //           </button>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default ViewAddtocart;\n\nimport { useEffect, useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewAddtocart = () => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [cartcount, setcartcount] = useState(0);\n  const [orderplaced, setorderplaced] = useState(false);\n  const [deliveryPreference, setDeliveryPreference] = useState(\"normal\");\n  const navigate = useNavigate();\n  const email = localStorage.getItem(\"Email\") || \"guest\";\n  useEffect(() => {\n    const storedCart = JSON.parse(localStorage.getItem(`cart_${email}`)) || [];\n    setCart(storedCart);\n  }, [email]);\n  const updateCart = updatedCart => {\n    setCart(updatedCart);\n    localStorage.setItem(`cart_${email}`, JSON.stringify(updatedCart));\n    localStorage.setItem(\"cartcount\", updatedCart.length);\n    window.dispatchEvent(new Event(\"storage\"));\n  };\n  const handleIncreaseQuantity = index => {\n    const updatedCart = cart.map((item, i) => i === index ? {\n      ...item,\n      quantity: item.quantity + 1,\n      Price: ((item.quantity + 1) * item.unitPrice).toFixed(2)\n    } : item);\n    updateCart(updatedCart);\n  };\n  const handleDecreaseQuantity = index => {\n    const updatedCart = cart.map((item, i) => {\n      if (i === index) {\n        const newQuantity = item.quantity - 1;\n        if (newQuantity === 0) return null;\n        return {\n          ...item,\n          quantity: newQuantity,\n          Price: (newQuantity * item.unitPrice).toFixed(2)\n        };\n      }\n      return item;\n    }).filter(item => item !== null);\n    updateCart(updatedCart);\n    setcartcount(updatedCart.length);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    localStorage.setItem(\"cartcount\", updatedCart.length);\n    window.dispatchEvent(new Event(\"storage\"));\n  };\n  const handleRemoveItem = index => {\n    const updatedCart = cart.filter((_, i) => i !== index);\n    updateCart(updatedCart);\n  };\n  const placeOrder = () => {\n    const userId = localStorage.getItem(\"USER\");\n    navigate(`/Checkout/${userId}`, {\n      state: {\n        deliveryPreference,\n        totalAmount: parseFloat(totalAmount),\n        finalAmount: parseFloat(totalAmount) + (deliveryPreference === \"Fast\" ? 50 : 0)\n      }\n    });\n  };\n  const totalAmount = cart.reduce((acc, item) => acc + Number(item.Price), 0).toFixed(2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"Your Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 7\n    }, this), cart.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: orderplaced ? \"Your order is placed.\" : \"Your cart is empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/past-orders\",\n        className: \"btn btn-primary mt-2\",\n        style: {\n          textDecoration: \"none\"\n        },\n        children: \"View Past Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 985,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8\",\n        children: cart.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex mb-4 border rounded p-3 shadow-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.image,\n            alt: item.name,\n            className: \"img-fluid rounded\",\n            style: {\n              width: \"150px\",\n              height: \"150px\",\n              objectFit: \"cover\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1003,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ms-3 flex-grow-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1016,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-1\",\n              children: [\"Unit Price: \\u20B9\", item.unitPrice]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1017,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-1\",\n              children: [\"Total Price: \\u20B9\", item.Price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1018,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-2\",\n              children: [\"Quantity: \", item.quantity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1019,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: \"12px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  width: \"32px\",\n                  height: \"32px\",\n                  border: \"1px solid #c2c2c2\",\n                  backgroundColor: \"#fff\",\n                  color: \"#333\",\n                  fontSize: \"18px\",\n                  fontWeight: \"bold\",\n                  borderRadius: \"50%\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  cursor: \"pointer\"\n                },\n                onMouseOver: e => e.target.style.backgroundColor = \"#f8f8f8\",\n                onMouseOut: e => e.target.style.backgroundColor = \"#fff\",\n                onClick: () => handleDecreaseQuantity(index),\n                children: \"\\u2212\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1028,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: \"40px\",\n                  height: \"32px\",\n                  border: \"1px solid #c2c2c2\",\n                  textAlign: \"center\",\n                  lineHeight: \"30px\",\n                  borderRadius: \"4px\",\n                  fontWeight: \"500\"\n                },\n                children: item.quantity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1054,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  width: \"32px\",\n                  height: \"32px\",\n                  border: \"1px solid #c2c2c2\",\n                  backgroundColor: \"#fff\",\n                  color: \"#333\",\n                  fontSize: \"18px\",\n                  fontWeight: \"bold\",\n                  borderRadius: \"50%\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  cursor: \"pointer\"\n                },\n                onMouseOver: e => e.target.style.backgroundColor = \"#f8f8f8\",\n                onMouseOut: e => e.target.style.backgroundColor = \"#fff\",\n                onClick: () => handleIncreaseQuantity(index),\n                children: \"+\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1068,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-sm btn-danger ms-3\",\n                onClick: () => handleRemoveItem(index),\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1094,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1021,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1015,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 998,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 996,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card p-3 shadow-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"mb-3\",\n            children: \"Cart Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-group mb-3\",\n            children: cart.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"list-group-item d-flex justify-content-between\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1116,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"\\u20B9\", Number(item.Price).toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1117,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1112,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"deliveryPreference\",\n              className: \"form-label\",\n              children: \"Delivery Preference\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"deliveryPreference\",\n              className: \"form-select\",\n              value: deliveryPreference,\n              onChange: e => setDeliveryPreference(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"Normal (Free, 7 Days)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1132,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Fast\",\n                children: \"Fast (Rs.50, 2 Days)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1133,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1126,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"text-end\",\n            children: [\"Total: \\u20B9\", (parseFloat(totalAmount) + (deliveryPreference === \"Fast\" ? 50 : 0)).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: \"100%\",\n              backgroundColor: \"#fb641b\",\n              color: \"#fff\",\n              border: \"none\",\n              borderRadius: \"2px\",\n              padding: \"12px 0\",\n              fontSize: \"16px\",\n              fontWeight: \"bold\",\n              boxShadow: \"0 1px 2px 0 rgba(0, 0, 0, 0.2)\",\n              cursor: \"pointer\",\n              marginTop: \"16px\"\n            },\n            onClick: placeOrder,\n            children: \"PLACE ORDER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1145,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 994,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 979,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewAddtocart, \"9ctR/xmDG0U1DsIfgB3dp0DMhmE=\", false, function () {\n  return [useNavigate];\n});\n_c = ViewAddtocart;\nexport default ViewAddtocart;\nvar _c;\n$RefreshReg$(_c, \"ViewAddtocart\");","map":{"version":3,"names":["useEffect","useState","Link","useNavigate","jsxDEV","_jsxDEV","ViewAddtocart","_s","cart","setCart","cartcount","setcartcount","orderplaced","setorderplaced","deliveryPreference","setDeliveryPreference","navigate","email","localStorage","getItem","storedCart","JSON","parse","updateCart","updatedCart","setItem","stringify","length","window","dispatchEvent","Event","handleIncreaseQuantity","index","map","item","i","quantity","Price","unitPrice","toFixed","handleDecreaseQuantity","newQuantity","filter","handleRemoveItem","_","placeOrder","userId","state","totalAmount","parseFloat","finalAmount","reduce","acc","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","style","textDecoration","src","image","alt","name","width","height","objectFit","display","alignItems","gap","border","backgroundColor","color","fontSize","fontWeight","borderRadius","justifyContent","cursor","onMouseOver","e","target","onMouseOut","onClick","textAlign","lineHeight","htmlFor","id","value","onChange","padding","boxShadow","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/serviceProject/frontend/src/components/viewAddtocart.js"],"sourcesContent":["// // import React, { useEffect, useState } from 'react'\r\n// // import axios from \"axios\";\r\n// // import Button from 'react-bootstrap/Button';\r\n// // import Modal from 'react-bootstrap/Modal';\r\n// // import { Link } from 'react-router-dom';\r\n\r\n// // const ViewAddtocart = () => {\r\n// //     const [items,setItems]=useState([]);\r\n// //     const [show, setShow] = useState(false);\r\n// //     const [deleteId, setDeleteId] = useState(null);\r\n\r\n\r\n    \r\n// //     const fetchData=async()=>{\r\n// //         try{\r\n// //             const response=await axios.get(\"http://localhost:5001/api/viewaddtocart\");\r\n// //             console.log(\"cart data\",response.data);\r\n// //             setItems(response.data);\r\n// //         }catch(err){\r\n// //             console.log(\"error during fetching blogs data\",err);\r\n// //         }\r\n// //     };\r\n// //     useEffect(()=>{\r\n// //         fetchData();\r\n// //         },[]);\r\n         \r\n        \r\n// //     // डिलीट करने के लिए Modal Open करें\r\n// //     const handleShow = (id) => {\r\n// //         console.log(\"Item to be deleted:\", id);\r\n// //         setDeleteId(id);\r\n// //         setShow(true);\r\n// //     };\r\n\r\n// //     // डिलीट कन्फर्म करें\r\n// //     const deleteItem = async () => {\r\n// //         if (!deleteId) {\r\n// //             console.log(\"No item selected for deletion.\");\r\n// //             return;\r\n// //         }\r\n\r\n// //         try {\r\n// //             console.log(\"Deleting item:\", deleteId);\r\n// //             await axios.delete(`http://localhost:5001/api/deleteitem/${deleteId}`);\r\n\r\n// //             // डिलीट होने के बाद UI अपडेट करें\r\n// //             setItems(items.filter((item) => item._id !== deleteId));\r\n// //             setShow(false); // Modal बंद करें\r\n// //         } catch (err) {\r\n// //             console.log(\"Error deleting item:\", err);\r\n// //         }\r\n// //     };\r\n\r\n\r\n// //   return (\r\n// //     <div className=\"container my-5\">\r\n// //     <h2 className=\"text-center mb-4\">Cart items</h2>\r\n// //     <div className=\"row\">\r\n// //         {items.map((item) => (\r\n// //             <div key={item._id} className=\"col-md-4 mb-4\">\r\n// //                 <div className=\"card h-100\">\r\n// //                     <img src={item.smallsubcategoryimage}  className=\"card-img-top p-5\" style={{ height: \"250px\", width: \"100%\", objectFit: \"cover\" }}  />\r\n// //                     <div className=\"card-body\">\r\n// //                     <h5 className=\"card-title\">{item.subcategoryname}</h5>\r\n\r\n\r\n// //                         <h5 className=\"card-title\">{item.smallsubcategoryname}</h5>\r\n// //                         <h5 className=\"card-text\">{item.Price}</h5>\r\n// //                         <div className=\"mb-0 d-flex  \">\r\n// //                             {/* <Link to={`/blogdetail/${item._id}`} className=\"btn btn-primary btn-sm\">\r\n                            \r\n// //                                 Read More\r\n// //                             </Link> */}\r\n// //                             <button className=\"btn btn-danger btn-sm\" onClick={() => handleShow(item._id)}>\r\n// //                                 Remove\r\n// //                             </button>\r\n// //                         </div>\r\n// //                     </div>\r\n// //                 </div>\r\n// //             </div>\r\n// //         ))}\r\n// //     </div>\r\n// //     {/* Delete Confirmation Modal */}\r\n// //     <Modal show={show} onHide={() => setShow(false)}>\r\n// //                 <Modal.Header closeButton>\r\n// //                     <Modal.Title>Confirm Delete</Modal.Title>\r\n// //                 </Modal.Header>\r\n// //                 <Modal.Body>Are you sure you want to delete this item?</Modal.Body>\r\n// //                 <Modal.Footer>\r\n// //                     <Button variant=\"secondary\" onClick={() => setShow(false)}>\r\n// //                         Cancel\r\n// //                     </Button>\r\n// //                     <Button variant=\"danger\" onClick={deleteItem}>\r\n// //                         Delete\r\n// //                     </Button>\r\n// //                 </Modal.Footer>\r\n// //             </Modal>\r\n        \r\n// // </div>\r\n\r\n// //   )\r\n// // }\r\n\r\n\r\n// // export default ViewAddtocart;\r\n\r\n\r\n\r\n\r\n// import { useEffect, useState } from \"react\";\r\n// import { Link,useNavigate } from \"react-router-dom\";\r\n\r\n// const ViewAddtocart = () => {\r\n//   const [cart, setCart] = useState([]);\r\n//   const [cartcount, setcartcount] = useState(0); // Initialize cartcount state\r\n//   const [orderplaced,setorderplaced]=useState(false);\r\n//   const [deliveryPreference, setDeliveryPreference] = useState(\"normal\");\r\n//   const navigate = useNavigate();\r\n\r\n\r\n\r\n//   const email = localStorage.getItem(\"Email\") || \"guest\";\r\n\r\n  \r\n\r\n// useEffect(() => {\r\n//   const storedCart = JSON.parse(localStorage.getItem(`cart_${email}`)) || [];\r\n//   setCart(storedCart);\r\n// }, [email]);\r\n\r\n// const updateCart = (updatedCart) => {\r\n//   setCart(updatedCart);\r\n//   localStorage.setItem(`cart_${email}`, JSON.stringify(updatedCart));\r\n//   localStorage.setItem(\"cartcount\", updatedCart.length);\r\n//   window.dispatchEvent(new Event(\"storage\"));\r\n// };\r\n\r\n\r\n//   const handleIncreaseQuantity = (index) => {\r\n//     const updatedCart = cart.map((item, i) =>\r\n//       i === index\r\n//         ? { ...item, quantity: item.quantity + 1, Price: (item.quantity + 1) * (item.Price / item.quantity) }\r\n//         : item\r\n//     );\r\n//     updateCart(updatedCart);\r\n//   };\r\n\r\n\r\n\r\n\r\n// const handleDecreaseQuantity = (index) => {\r\n//     const updatedCart = cart\r\n//       .map((item, i) => {\r\n//         if (i === index) {\r\n//           const newQuantity = item.quantity - 1;\r\n//           if (newQuantity === 0) return null; // Mark for removal\r\n//           return { \r\n//             ...item, \r\n//             quantity: newQuantity, \r\n//             Price: (newQuantity * (item.Price / item.quantity)).toFixed(2) \r\n//           };\r\n//         }\r\n//         return item;\r\n//       })\r\n//       .filter(item => item !== null); // Remove items marked as null\r\n  \r\n//     updateCart(updatedCart);\r\n\r\n//     const newCartCount = updatedCart.length;  // Calculate cart count based on updatedCart length\r\n//     setcartcount(newCartCount);\r\n\r\n//     // Store updated cart and cart count in localStorage\r\n//     localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n//     localStorage.setItem(\"cartcount\", newCartCount);\r\n\r\n//     window.dispatchEvent(new Event(\"storage\"));\r\n\r\n//   };\r\n  \r\n//   const handleRemoveItem = (index) => {\r\n//     const updatedCart = cart.filter((_, i) => i !== index);\r\n//     updateCart(updatedCart);\r\n//   };\r\n\r\n//   const handlePlaceOrder = async () => {\r\n//     const userId = localStorage.getItem(\"USER\");\r\n  \r\n//     if (!userId || cart.length === 0) {\r\n//       alert(\"Invalid order data. Please log in and add items.\");\r\n//       return;\r\n//     }\r\n//     const extracharge=deliveryPreference===\"Fast\"? 50 :0;\r\n//     const finalAmount=parseFloat(totalAmount)+extracharge;\r\n    \r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5001/api/orderplaced\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//           userId,\r\n//           cartItems: cart,\r\n//           totalAmount:finalAmount,\r\n//           deliveryPreference, // <== ADD THIS LINE\r\n//           userEmail:localStorage.getItem(\"Email\"),\r\n//         }),\r\n//       });\r\n  \r\n\r\n//       const orderData=response.data.order;\r\n//       if(response.status===201 && orderData._id)\r\n//         const options={\r\n//       key=\"rzp_text_99IwqPHWTFKKXS\",\r\n//       amount:parseFloat(totalAmountWithDelivery)*100,\r\n//       currency:\"INR\",\r\n//       name:\"Softwizz\",\r\n//       description:\"Order Payment\",\r\n//       handler:async function (razorpayResponse){\r\n//         try {\r\n//           const paymentRes=await api.put(`http://localhost:5000/api/updatepayment/${orderData._id}`,{\r\n//             paymentId:razorpayResponse.razorpay_paymewnt_id,\r\n//             paymentStatus:\"Paid\",\r\n//           });\r\n//           if(paymentRes===200){\r\n//             alert(\"Paymnent successfull\")\r\n//                     localStorage.removeItem(`cart_${email}`);\r\n//         localStorage.setItem(\"cartcount\", 0);\r\n//         setCart([]);\r\n//         setcartcount(0);\r\n//         setorderplaced(true);\r\n//         window.dispatchEvent(new Event(\"storage\"));\r\n//         navigate(\"/\")\r\n//           }else{\r\n//             alert(\"Payment captured but failed to update order\")\r\n//           }\r\n\r\n//           }\r\n          \r\n//         } catch (error) {\r\n//           console.error(\"Payment failed\",error)\r\n          \r\n//         }\r\n//       }\r\n//     },\r\n//     prefix:{\r\n//       name:address,\r\n//       email:email,\r\n//       contact:\"999999999\"\r\n//     },\r\n//     theme:{\r\n//       color:\"#339cc\"\r\n//     };\r\n//     const rzp=new window.Razorpay(options)\r\n//     rzp.open()\r\n//   }else{\r\n//     alert(\"failed\")\r\n//   }\r\n//   const placeOrder = async () => {\r\n//     const userId = localStorage.getItem(\"USER\");\r\n//     navigate(`/Checkout/${userId}`, {\r\n//       state: {\r\n//         deliveryPreference,\r\n//         totalAmount: parseFloat(totalAmount),\r\n//         finalAmount: parseFloat(totalAmount) + (deliveryPreference === \"Fast\" ? 50 : 0)\r\n//       }\r\n//     });\r\n//   };\r\n  \r\n\r\n//   const totalAmount= cart\r\n//   .reduce((acc, item) => acc + Number(item.Price), 0)\r\n//   .toFixed(2);\r\n\r\n//   return (\r\n//     // <div className=\"container my-5\">\r\n//     //   <h2 className=\"text-center mb-4\">Your Cart</h2>\r\n//     //   {cart.length === 0 ? (\r\n//     //     <p className=\"text-center\">Your cart is empty.</p>\r\n//     //   ) : (\r\n//     //     <div className=\"row\">\r\n//     //       {cart.map((item, index) => (\r\n//     //         <div key={index} className=\"col-md-4 mb-4\">\r\n//     //           <div className=\"card\">\r\n//     //             <img src={item.image} className=\"card-img-top\" alt={item.name} />\r\n//     //             <div className=\"card-body\">\r\n//     //               <h5>{item.name}</h5>\r\n//     //               <p>Price: ₹{item.Price}</p>\r\n//     //               <p>Quantity: {item.quantity}</p>\r\n                  \r\n//     //               <div className=\"d-flex justify-content-between\">\r\n//     //                 <button className=\"btn btn-sm btn-success\" onClick={() => handleIncreaseQuantity(index)}>+</button>\r\n//     //                 <button className=\"btn btn-sm btn-warning\" onClick={() => handleDecreaseQuantity(index)}>-</button>\r\n//     //                 <button className=\"btn btn-sm btn-danger\" onClick={() => handleRemoveItem(index)}>Remove</button>\r\n//     //               </div>\r\n//     //             </div>\r\n//     //           </div>\r\n//     //         </div>\r\n//     //       ))}\r\n          \r\n//     //     </div>\r\n        \r\n//     //   )}\r\n//     // </div>\r\n\r\n// //     <div className=\"container my-5\">\r\n// //   <h2 className=\"text-center mb-4\">Your Cart</h2>\r\n// //   {cart.length === 0 ? (\r\n// //     <p className=\"text-center\">Your cart is empty.</p>\r\n// //   ) : (\r\n// //     <div className=\"row\">\r\n      \r\n\r\n// //       {/* t Column: Cart Items */}\r\n// //       <div className=\"col-md-8\">\r\n// //         <div className=\"row\">\r\n// //           {cart.map((item, index) => (\r\n// //             <div key={index} className=\"col-md-6 mb-4\">\r\n// //               <div className=\"card\">\r\n// //                 <img src={item.image} className=\"card-img-top\" alt={item.name} />\r\n// //                 <div className=\"card-body\">\r\n// //                   <h5>{item.name}</h5>\r\n// //                   <p>Price: ₹{item.Price}</p>\r\n// //                   <p>Quantity: {item.quantity}</p>\r\n\r\n// //                   <div className=\"d-flex justify-content-between\">\r\n// //                     <button className=\"btn btn-sm btn-success\" onClick={() => handleIncreaseQuantity(index)}>+</button>\r\n// //                     <button className=\"btn btn-sm btn-warning\" onClick={() => handleDecreaseQuantity(index)}>-</button>\r\n// //                     <button className=\"btn btn-sm btn-danger\" onClick={() => handleRemoveItem(index)}>Remove</button>\r\n// //                   </div>\r\n// //                 </div>\r\n// //               </div>\r\n// //             </div>\r\n// //           ))}\r\n// //         </div>\r\n// //       </div>\r\n\r\n// //       {/* right Column: Cart Summary */}\r\n      \r\n// // <div className=\"col-md-4 mb-4\">\r\n// //   <div className=\"card p-3\">\r\n// //     <h5 className=\"mb-3\">Cart Summary</h5>\r\n// //     <ul className=\"list-group mb-3\">\r\n// //       {cart.map((item, index) => (\r\n// //         <li key={index} className=\"list-group-item d-flex justify-content-between\">\r\n// //           <span>{item.name} </span>\r\n// //           <span>₹{Number(item.Price).toFixed(2)}</span>\r\n// //         </li>\r\n// //       ))}\r\n// //     </ul>\r\n// //     {/* <h6 className=\"text-end\">\r\n// //       Total: ₹{new Intl.NumberFormat('en-IN', { minimumFractionDigits: 2 }).format(\r\n// //         cart.reduce((acc, item) => acc + Number(item.Price), 0)\r\n// //       )}\r\n// //     </h6> */}\r\n// //     <h6 className=\"text-end\">\r\n// //   Total: ₹{cart.reduce((acc, item) => acc + Number(item.Price), 0).toFixed(2)}\r\n// // </h6>\r\n\r\n// //   </div>\r\n// // </div>\r\n\r\n// //     </div>\r\n// //   )}\r\n// // </div>\r\n\r\n// <div className=\"container my-5\">\r\n//   <h2 className=\"text-center mb-4\">Your Cart</h2>\r\n\r\n//   {cart.length === 0 ? (\r\n//   <div className=\"text-center\">\r\n//   <p>{orderplaced ? \"Your order is placed.\" : \"Your cart is empty.\"}</p>\r\n//   <Link\r\n//     to=\"/past-orders\" \r\n//     className=\"btn btn-primary mt-2\"\r\n//     style={{ textDecoration: \"none\" }}\r\n//   >\r\n//     View Past Orders\r\n//   </Link>\r\n// </div>\r\n\r\n  \r\n// ) : (\r\n\r\n//     <div className=\"row\">\r\n//       {/* Left Column: Cart Items */}\r\n//       <div className=\"col-md-8\">\r\n//         {cart.map((item, index) => (\r\n//           <div key={index} className=\"d-flex mb-4 border rounded p-3 shadow-sm\">\r\n//             {/* Image */}\r\n//             <img\r\n//               src={item.image}\r\n//               alt={item.name}\r\n//               className=\"img-fluid rounded\"\r\n//               style={{ width: '150px', height: '150px', objectFit: 'cover' }}\r\n//             />\r\n\r\n//             {/* Details */}\r\n//             <div className=\"ms-3 flex-grow-1\">\r\n//               <h5>{item.name}</h5>\r\n//               <p className=\"mb-1\">Price: ₹{Number(item.Price).toFixed(2)}</p>\r\n//               <p className=\"mb-2\">Quantity: {item.quantity}</p>\r\n\r\n             \r\n\r\n// <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\r\n//   <button\r\n//     style={{\r\n//       width: \"32px\",\r\n//       height: \"32px\",\r\n//       border: \"1px solid #c2c2c2\",\r\n//       backgroundColor: \"#fff\",\r\n//       color: \"#333\",\r\n//       fontSize: \"18px\",\r\n//       fontWeight: \"bold\",\r\n//       borderRadius: \"50%\",\r\n//       display: \"flex\",\r\n//       alignItems: \"center\",\r\n//       justifyContent: \"center\",\r\n//       cursor: \"pointer\",\r\n//     }}\r\n//     onMouseOver={(e) => (e.target.style.backgroundColor = \"#f8f8f8\")}\r\n//     onMouseOut={(e) => (e.target.style.backgroundColor = \"#fff\")}\r\n//     onClick={() => handleDecreaseQuantity(index)}\r\n//   >\r\n//     −\r\n//   </button>\r\n\r\n//   <div\r\n//     style={{\r\n//       width: \"40px\",\r\n//       height: \"32px\",\r\n//       border: \"1px solid #c2c2c2\",\r\n//       textAlign: \"center\",\r\n//       lineHeight: \"30px\",\r\n//       borderRadius: \"4px\",\r\n//       fontWeight: \"500\",\r\n//     }}\r\n//   >\r\n//     {item.quantity}\r\n//   </div>\r\n\r\n//   <button\r\n//     style={{\r\n//       width: \"32px\",\r\n//       height: \"32px\",\r\n//       border: \"1px solid #c2c2c2\",\r\n//       backgroundColor: \"#fff\",\r\n//       color: \"#333\",\r\n//       fontSize: \"18px\",\r\n//       fontWeight: \"bold\",\r\n//       borderRadius: \"50%\",\r\n//       display: \"flex\",\r\n//       alignItems: \"center\",\r\n//       justifyContent: \"center\",\r\n//       cursor: \"pointer\",\r\n//     }}\r\n//     onMouseOver={(e) => (e.target.style.backgroundColor = \"#f8f8f8\")}\r\n//     onMouseOut={(e) => (e.target.style.backgroundColor = \"#fff\")}\r\n//     onClick={() => handleIncreaseQuantity(index)}\r\n//   >\r\n//     +\r\n//   </button>\r\n\r\n//   <button\r\n//     className=\"btn btn-sm btn-danger ms-3\"\r\n//     onClick={() => handleRemoveItem(index)}\r\n//   >\r\n//     Remove\r\n//   </button>\r\n// </div>\r\n\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Right Column: Cart Summary */}\r\n//       <div className=\"col-md-4 mb-4\">\r\n//         <div className=\"card p-3 shadow-sm\">\r\n//           <h5 className=\"mb-3\">Cart Summary</h5>\r\n//           <ul className=\"list-group mb-3\">\r\n//             {cart.map((item, index) => (\r\n//               <li\r\n//                 key={index}\r\n//                 className=\"list-group-item d-flex justify-content-between\"\r\n//               >\r\n//                 <span>{item.name}</span>\r\n//                 <span>₹{Number(item.Price).toFixed(2)}</span>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n\r\n          \r\n\r\n//           <div className=\"mb-3\">\r\n//   <label htmlFor=\"deliveryPreference\" className=\"form-label\">\r\n//     Delivery Preference\r\n//   </label>\r\n//   <select\r\n//     id=\"deliveryPreference\"\r\n//     className=\"form-select\"\r\n//     value={deliveryPreference}\r\n//     onChange={(e) => setDeliveryPreference(e.target.value)}\r\n//   >\r\n//     <option value=\"normal\">Normal (Free,7 Days)</option>\r\n//     <option value=\"Fast\">Fast (Rs.50, 2 Days)</option>\r\n//   </select>\r\n// </div>\r\n// <h6 className=\"text-end\">\r\n//             Total: ₹\r\n//             {(parseFloat(totalAmount)+(deliveryPreference===\"Fast\"?50:0)).toFixed(2)}\r\n//           </h6>\r\n\r\n//           <button\r\n//     style={{\r\n//       width: \"100%\",\r\n//       backgroundColor: \"#fb641b\",\r\n//       color: \"#fff\",\r\n//       border: \"none\",\r\n//       borderRadius: \"2px\",\r\n//       padding: \"12px 0\",\r\n//       fontSize: \"16px\",\r\n//       fontWeight: \"bold\",\r\n//       boxShadow: \"0 1px 2px 0 rgba(0, 0, 0, 0.2)\",\r\n//       cursor: \"pointer\",\r\n//       marginTop: \"16px\"\r\n//     }}\r\n//     // onClick={handlePlaceOrder}\r\n//     onClick={placeOrder}\r\n//   >\r\n//     PLACE ORDER\r\n//   </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   )}\r\n// </div>\r\n\r\n\r\n//   );\r\n// };\r\n\r\n// export default ViewAddtocart;\r\n// // import { useEffect, useState } from \"react\";\r\n// // import { useNavigate } from \"react-router-dom\";\r\n// // // import \"./Addtocart.css\";\r\n// // import api from \"../axios\";\r\n\r\n// // const ViewAddtocart = () => {\r\n  \r\n// //   const [cart, setCart] = useState([]);\r\n// //   const [cartcount, setCartcount] = useState(0);\r\n// //   const [orderplaced, setOrderPlaced] = useState(false);\r\n// //   const [deliveryType, setDeliveryType] = useState(\"\");\r\n// //   const [address, setAddress] = useState(\"\");\r\n// //   const [city, setCity] = useState(\"\");\r\n// //   const [pincode, setPincode] = useState(\"\");\r\n// //   const [step, setStep] = useState(0);\r\n\r\n// //   const navigate = useNavigate();\r\n// //   const email = localStorage.getItem(\"EMAIL\") || \"guest\";\r\n\r\n// //   // Ensure the user is logged in and is not an admin\r\n// //   useEffect(() => {\r\n// //     const user = localStorage.getItem(\"USER\");\r\n// //     const role = localStorage.getItem(\"Role\");\r\n\r\n// //     if (!user || role === \"admin\") {\r\n// //       console.log(\"Role in localStorage:\", role);  // Debugging: Check the role\r\n// //       alert(\"Access denied! Please login as a valid user.\");\r\n// //       navigate(\"/login\");\r\n// //     }\r\n// //   }, [navigate]);\r\n\r\n// //   // Load cart from localStorage on initial render\r\n// //   useEffect(() => {\r\n// //     const storedCart = JSON.parse(localStorage.getItem(`cart_${email}`)) || [];\r\n// //     setCart(storedCart);\r\n// //     setCartcount(storedCart.length);\r\n// //   }, [email]);\r\n\r\n// //   // Function to update cart state and localStorage\r\n// //   const updateCart = (updatedCart) => {\r\n// //     setCart(updatedCart);\r\n// //     setCartcount(updatedCart.length);\r\n// //     localStorage.setItem(`cart_${email}`, JSON.stringify(updatedCart));\r\n// //     localStorage.setItem(\"cartcount\", updatedCart.length);\r\n// //     window.dispatchEvent(new Event(\"storage\"));\r\n// //   };\r\n\r\n// //   // Function to increase item quantity\r\n// //   const handleIncreaseQuantity = (index) => {\r\n// //     const updatedCart = cart.map((item, i) =>\r\n// //       i === index\r\n// //         ? {\r\n// //             ...item,\r\n// //             quantity: item.quantity + 1,\r\n// //             Price: ((item.Price / item.quantity) * (item.quantity + 1)).toFixed(2),\r\n// //           }\r\n// //         : item\r\n// //     );\r\n// //     updateCart(updatedCart);\r\n// //   };\r\n    \r\n// //   const handleDecreaseQuantity = (index) => {\r\n// //     const updatedCart = cart\r\n// //       .map((item, i) => {\r\n// //         if (i === index) {\r\n// //           const newQuantity = item.quantity - 1;\r\n// //           if (newQuantity === 0) return null;\r\n// //           return {\r\n// //             ...item,\r\n// //             quantity: newQuantity,\r\n// //             Price: (item.unitPrice * newQuantity).toFixed(2),\r\n// //           };\r\n// //         }\r\n// //         return item;\r\n// //       })\r\n// //       .filter((item) => item !== null);\r\n// //     updateCart(updatedCart);\r\n// //   };\r\n// //     // Function to remove item from cart\r\n// //   const handleRemoveItem = (index) => {\r\n// //     const updatedCart = cart.filter((_, i) => i !== index);\r\n// //     updateCart(updatedCart);\r\n// //   };\r\n\r\n// //   // Calculate total amount of the cart\r\n// //   const totalAmount = cart\r\n// //     .reduce((total, item) => total + parseFloat(item.Price), 0)\r\n// //     .toFixed(2);\r\n\r\n// //   // Add extra charges for fast delivery\r\n// //   const extracharge = deliveryType === \"Fast\" ? 50 : 0;\r\n// //   const totalAmountWithDelivery = (parseFloat(totalAmount) + extracharge).toFixed(2);\r\n\r\n// //   // Handle placing the order\r\n// //   const handlePlaceOrder = async () => {\r\n// //     const userId = localStorage.getItem(\"USER\");\r\n  \r\n// //     if (!userId || cart.length === 0) {\r\n// //       alert(\"Invalid order data. Please log in and add items.\");\r\n// //       return;\r\n// //     }\r\n  \r\n// //     if (!address.trim() || !city.trim() || !pincode.trim() || !deliveryType) {\r\n// //       alert(\"Please fill all delivery details (address, city, pincode, delivery type).\");\r\n// //       return;\r\n// //     }\r\n  \r\n// //     try {\r\n// //       const response = await api.post(\"/orders\", {\r\n// //         userId,\r\n// //         cartItems: cart,\r\n// //         totalAmount: totalAmountWithDelivery,\r\n// //         pincode,\r\n// //         address,\r\n// //         city,\r\n// //         serviceDate: new Date(),\r\n// //         deliveryType,\r\n// //         userEmail: email,\r\n// //       });\r\n  \r\n// //       const orderData = response.data.order; // ✅ FIXED HERE\r\n  \r\n// //       if (response.status === 201 && orderData._id) {\r\n// //         const options = {\r\n// //           key: \"rzp_test_99IwqPHWTFKkXS\", // ✅ Use real Razorpay key in production\r\n// //           amount: parseFloat(totalAmountWithDelivery) * 100, // amount in paise\r\n// //           currency: \"INR\",\r\n// //           name: \"Softwizz\",\r\n// //           description: \"Order Payment\",\r\n// //           handler: async function (razorpayResponse) {\r\n// //             try {\r\n// //               const paymentRes = await api.put(`/updatepayment/${orderData._id}`, {\r\n// //                 paymentId: razorpayResponse.razorpay_payment_id,\r\n// //                 paymentStatus: \"Paid\",\r\n// //               });\r\n  \r\n// //               if (paymentRes.status === 200) {\r\n// //                 alert(\"Payment Successful!\");\r\n// //                 localStorage.removeItem(`cart_${email}`);\r\n// //                 localStorage.setItem(\"cartcount\", 0);\r\n// //                 setCart([]);\r\n// //                 setCartcount(0);\r\n// //                 setOrderPlaced(true);\r\n// //                 window.dispatchEvent(new Event(\"storage\"));\r\n// //                 navigate(\"/\"); // ✅ Optionally redirect to a Thank You page\r\n// //               } else {\r\n// //                 alert(\"Payment captured but failed to update order.\");\r\n// //               }\r\n// //             } catch (err) {\r\n// //               console.error(\"Payment update failed:\", err);\r\n// //               alert(\"Payment succeeded but order update failed.\");\r\n// //             }\r\n// //           },\r\n// //           prefill: {\r\n// //             name: address,\r\n// //             email: email,\r\n// //             contact: \"9999999999\", // Optional\r\n// //           },\r\n// //           theme: {\r\n// //             color: \"#3399cc\",\r\n// //           },\r\n// //         };\r\n  \r\n// //         const rzp = new window.Razorpay(options);\r\n// //         rzp.open();\r\n// //       } else {\r\n// //         alert(\"Failed to create order. Try again.\");\r\n// //       }\r\n// //     } catch (error) {\r\n// //       console.error(\"Order placement error:\", error);\r\n// //       alert(\"Something went wrong. Please try again.\");\r\n// //     }\r\n// //   };\r\n// //       return (\r\n// //     <div className=\"addtocart-container py-5\">\r\n// //       {/* Step Indicators */}\r\n// //       <div className=\"checkout-steps mb-4\">\r\n// //         {[\"Cart\", \"Address\", \"Payment\", \"Summary\"].map((label, idx) => (\r\n// //           <div\r\n// //             key={idx}\r\n// //             className={`step ${step === idx ? \"active\" : step > idx ? \"completed\" : \"\"}`}\r\n// //           >\r\n// //             <div className=\"step-circle\">{idx + 1}</div>\r\n// //             <div className=\"step-label\">{label}</div>\r\n// //           </div>\r\n// //         ))}\r\n// //       </div>\r\n\r\n// //       {/* Step 0 - Cart */}\r\n// //       {step === 0 && (\r\n// //         <div className=\"row\">\r\n// //           <div className=\"col-md-8\">\r\n// //             <h4>Your Cart</h4>\r\n// //             <div className=\"row\">\r\n// //               {cart.map((item, index) => (\r\n// //                 <div key={index} className=\"col-md-6 mb-4\">\r\n// //                   <div className=\"card cart-card shadow-sm\">\r\n// //                     <img\r\n// //                       src={item.image}\r\n// //                       className=\"card-img-top\"\r\n// //                       style={{ height: \"180px\", objectFit: \"cover\" }}\r\n// //                     />\r\n// //                     <div className=\"card-body\">\r\n// //                       <h5 className=\"card-title\">{item.name}</h5>\r\n// //                       <p className=\"card-text\">\r\n// //                         ₹{item.Price} × {item.quantity}\r\n// //                       </p>\r\n// //                       <div className=\"d-flex justify-content-between\">\r\n// //                         <button\r\n// //                           className=\"btn btn-success btn-sm\"\r\n// //                           onClick={() => handleIncreaseQuantity(index)}\r\n// //                         >\r\n// //                           +\r\n// //                         </button>\r\n// //                         <button\r\n// //                           className=\"btn btn-warning btn-sm text-white\"\r\n// //                           onClick={() => handleDecreaseQuantity(index)}\r\n// //                         >\r\n// //                           -\r\n// //                         </button>\r\n// //                         <button\r\n// //                           className=\"btn btn-danger btn-sm\"\r\n// //                           onClick={() => handleRemoveItem(index)}\r\n// //                         >\r\n// //                           Remove\r\n// //                         </button>\r\n// //                       </div>\r\n// //                     </div>\r\n// //                   </div>\r\n// //                 </div>\r\n// //               ))}\r\n// //             </div>\r\n// //           </div>\r\n\r\n// //           <div className=\"col-md-4\">\r\n// //             <div className=\"card p-3\">\r\n// //               <h5>Order Summary</h5>\r\n// //               <ul className=\"list-group list-group-flush\">\r\n// //                 {cart.map((item, idx) => (\r\n// //                   <li key={idx} className=\"list-group-item d-flex justify-content-between\">\r\n// //                     <span>{item.name} × {item.quantity}</span>\r\n// //                     <span>₹{item.Price}</span>\r\n// //                   </li>\r\n// //                 ))}\r\n// //                 <li className=\"list-group-item fw-bold d-flex justify-content-between border-top\">\r\n// //                   <span>Total</span>\r\n// //                   <span>₹{totalAmount}</span>\r\n// //                 </li>\r\n// //               </ul>\r\n// //               <button\r\n// //                 className=\"btn btn-primary mt-3 w-100\"\r\n// //                 disabled={cart.length === 0}\r\n// //                 onClick={() => setStep(1)}\r\n// //               >\r\n// //                 Continue\r\n// //               </button>\r\n// //             </div>\r\n// //           </div>\r\n// //         </div>\r\n// //       )}\r\n\r\n// //       {/* Step 1 - Address */}\r\n// //       {step === 1 && (\r\n// //         <div className=\"row justify-content-center\">\r\n// //           <div className=\"col-md-6\">\r\n// //             <h4>Delivery Address</h4>\r\n// //             <input\r\n// //               className=\"form-control my-2\"\r\n// //               placeholder=\"Address\"\r\n// //               value={address}\r\n// //               onChange={(e) => setAddress(e.target.value)}\r\n// //             />\r\n// //             <input\r\n// //               className=\"form-control my-2\"\r\n// //               placeholder=\"City\"\r\n// //               value={city}\r\n// //               onChange={(e) => setCity(e.target.value)}\r\n// //             />\r\n// //             <input\r\n// //               className=\"form-control my-2\"\r\n// //               placeholder=\"Pincode\"\r\n// //               value={pincode}\r\n// //               onChange={(e) => setPincode(e.target.value)}\r\n// //             />\r\n// //             <select\r\n// //               className=\"form-control my-2\"\r\n// //               value={deliveryType}\r\n// //               onChange={(e) => setDeliveryType(e.target.value)}\r\n// //             >\r\n// //               <option value=\"\">Select Delivery Type</option>\r\n// //               <option value=\"Fast\">Fast (₹50, 2 Days)</option>\r\n// //               <option value=\"Slow\">Normal (Free, 4 Days)</option>\r\n// //             </select>\r\n\r\n// //             <button\r\n// //               className=\"btn btn-primary w-100\"\r\n// //               onClick={() => {\r\n// //                 if (address && city && pincode && deliveryType) {\r\n// //                   setStep(2);\r\n// //                 } else {\r\n// //                   alert(\"Please fill all fields!\");\r\n// //                 }\r\n// //               }}\r\n// //             >\r\n// //               Continue to Payment\r\n// //             </button>\r\n\r\n// //             <button className=\"btn btn-secondary w-100 mt-2\" onClick={() => setStep(0)}>\r\n// //               Back to Cart\r\n// //             </button>\r\n// //           </div>\r\n// //         </div>\r\n// //       )}\r\n\r\n// //       {/* Step 2 - Payment */}\r\n// //       {step === 2 && (\r\n// //         <div className=\"text-center\">\r\n// //           <h4>Payment</h4>\r\n// //           <p>Simulated payment method (Cash/UPI etc)</p>\r\n// //           <button className=\"btn btn-dark\" onClick={() => setStep(3)}>\r\n// //             Continue to Summary\r\n// //           </button>\r\n// //           <br />\r\n// //           <button className=\"btn btn-secondary mt-2\" onClick={() => setStep(1)}>\r\n// //             Back to Address\r\n// //           </button>\r\n// //         </div>\r\n// //       )}\r\n\r\n// //       {/* Step 3 - Summary */}\r\n// //       {step === 3 && (\r\n// //         <div className=\"text-center\">\r\n// //           <h4>Order Summary</h4>\r\n// //           <p>Total: ₹{totalAmountWithDelivery}</p>\r\n// //           <button className=\"btn btn-success\" onClick={handlePlaceOrder}>\r\n// //             Place Order\r\n// //           </button>\r\n// //           <br />\r\n// //           <button className=\"btn btn-secondary mt-2\" onClick={() => setStep(2)}>\r\n// //             Back to Payment\r\n// //           </button>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default ViewAddtocart;\r\n\r\n\r\n\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nconst ViewAddtocart = () => {\r\n  const [cart, setCart] = useState([]);\r\n  const [cartcount, setcartcount] = useState(0);\r\n  const [orderplaced, setorderplaced] = useState(false);\r\n  const [deliveryPreference, setDeliveryPreference] = useState(\"normal\");\r\n  const navigate = useNavigate();\r\n\r\n  const email = localStorage.getItem(\"Email\") || \"guest\";\r\n\r\n  useEffect(() => {\r\n    const storedCart = JSON.parse(localStorage.getItem(`cart_${email}`)) || [];\r\n    setCart(storedCart);\r\n  }, [email]);\r\n\r\n  const updateCart = (updatedCart) => {\r\n    setCart(updatedCart);\r\n    localStorage.setItem(`cart_${email}`, JSON.stringify(updatedCart));\r\n    localStorage.setItem(\"cartcount\", updatedCart.length);\r\n    window.dispatchEvent(new Event(\"storage\"));\r\n  };\r\n\r\n  const handleIncreaseQuantity = (index) => {\r\n    const updatedCart = cart.map((item, i) =>\r\n      i === index\r\n        ? {\r\n            ...item,\r\n            quantity: item.quantity + 1,\r\n            Price: ((item.quantity + 1) * item.unitPrice).toFixed(2),\r\n          }\r\n        : item\r\n    );\r\n    updateCart(updatedCart);\r\n  };\r\n\r\n  const handleDecreaseQuantity = (index) => {\r\n    const updatedCart = cart\r\n      .map((item, i) => {\r\n        if (i === index) {\r\n          const newQuantity = item.quantity - 1;\r\n          if (newQuantity === 0) return null;\r\n          return {\r\n            ...item,\r\n            quantity: newQuantity,\r\n            Price: (newQuantity * item.unitPrice).toFixed(2),\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n      .filter((item) => item !== null);\r\n\r\n    updateCart(updatedCart);\r\n    setcartcount(updatedCart.length);\r\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n    localStorage.setItem(\"cartcount\", updatedCart.length);\r\n    window.dispatchEvent(new Event(\"storage\"));\r\n  };\r\n\r\n  const handleRemoveItem = (index) => {\r\n    const updatedCart = cart.filter((_, i) => i !== index);\r\n    updateCart(updatedCart);\r\n  };\r\n\r\n  const placeOrder = () => {\r\n    const userId = localStorage.getItem(\"USER\");\r\n    navigate(`/Checkout/${userId}`, {\r\n      state: {\r\n        deliveryPreference,\r\n        totalAmount: parseFloat(totalAmount),\r\n        finalAmount:\r\n          parseFloat(totalAmount) + (deliveryPreference === \"Fast\" ? 50 : 0),\r\n      },\r\n    });\r\n  };\r\n\r\n  const totalAmount = cart\r\n    .reduce((acc, item) => acc + Number(item.Price), 0)\r\n    .toFixed(2);\r\n\r\n  return (\r\n    <div className=\"container my-5\">\r\n      <h2 className=\"text-center mb-4\">Your Cart</h2>\r\n\r\n      {cart.length === 0 ? (\r\n        <div className=\"text-center\">\r\n          <p>{orderplaced ? \"Your order is placed.\" : \"Your cart is empty.\"}</p>\r\n          <Link\r\n            to=\"/past-orders\"\r\n            className=\"btn btn-primary mt-2\"\r\n            style={{ textDecoration: \"none\" }}\r\n          >\r\n            View Past Orders\r\n          </Link>\r\n        </div>\r\n      ) : (\r\n        <div className=\"row\">\r\n          {/* Left Column: Cart Items */}\r\n          <div className=\"col-md-8\">\r\n            {cart.map((item, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"d-flex mb-4 border rounded p-3 shadow-sm\"\r\n              >\r\n                {/* Image */}\r\n                <img\r\n                  src={item.image}\r\n                  alt={item.name}\r\n                  className=\"img-fluid rounded\"\r\n                  style={{\r\n                    width: \"150px\",\r\n                    height: \"150px\",\r\n                    objectFit: \"cover\",\r\n                  }}\r\n                />\r\n\r\n                {/* Details */}\r\n                <div className=\"ms-3 flex-grow-1\">\r\n                  <h5>{item.name}</h5>\r\n                  <p className=\"mb-1\">Unit Price: ₹{item.unitPrice}</p>\r\n                  <p className=\"mb-1\">Total Price: ₹{item.Price}</p>\r\n                  <p className=\"mb-2\">Quantity: {item.quantity}</p>\r\n\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      gap: \"12px\",\r\n                    }}\r\n                  >\r\n                    <button\r\n                      style={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        border: \"1px solid #c2c2c2\",\r\n                        backgroundColor: \"#fff\",\r\n                        color: \"#333\",\r\n                        fontSize: \"18px\",\r\n                        fontWeight: \"bold\",\r\n                        borderRadius: \"50%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onMouseOver={(e) =>\r\n                        (e.target.style.backgroundColor = \"#f8f8f8\")\r\n                      }\r\n                      onMouseOut={(e) =>\r\n                        (e.target.style.backgroundColor = \"#fff\")\r\n                      }\r\n                      onClick={() => handleDecreaseQuantity(index)}\r\n                    >\r\n                      −\r\n                    </button>\r\n\r\n                    <div\r\n                      style={{\r\n                        width: \"40px\",\r\n                        height: \"32px\",\r\n                        border: \"1px solid #c2c2c2\",\r\n                        textAlign: \"center\",\r\n                        lineHeight: \"30px\",\r\n                        borderRadius: \"4px\",\r\n                        fontWeight: \"500\",\r\n                      }}\r\n                    >\r\n                      {item.quantity}\r\n                    </div>\r\n\r\n                    <button\r\n                      style={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        border: \"1px solid #c2c2c2\",\r\n                        backgroundColor: \"#fff\",\r\n                        color: \"#333\",\r\n                        fontSize: \"18px\",\r\n                        fontWeight: \"bold\",\r\n                        borderRadius: \"50%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onMouseOver={(e) =>\r\n                        (e.target.style.backgroundColor = \"#f8f8f8\")\r\n                      }\r\n                      onMouseOut={(e) =>\r\n                        (e.target.style.backgroundColor = \"#fff\")\r\n                      }\r\n                      onClick={() => handleIncreaseQuantity(index)}\r\n                    >\r\n                      +\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn btn-sm btn-danger ms-3\"\r\n                      onClick={() => handleRemoveItem(index)}\r\n                    >\r\n                      Remove\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Right Column: Cart Summary */}\r\n          <div className=\"col-md-4 mb-4\">\r\n            <div className=\"card p-3 shadow-sm\">\r\n              <h5 className=\"mb-3\">Cart Summary</h5>\r\n              <ul className=\"list-group mb-3\">\r\n                {cart.map((item, index) => (\r\n                  <li\r\n                    key={index}\r\n                    className=\"list-group-item d-flex justify-content-between\"\r\n                  >\r\n                    <span>{item.name}</span>\r\n                    <span>₹{Number(item.Price).toFixed(2)}</span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"deliveryPreference\" className=\"form-label\">\r\n                  Delivery Preference\r\n                </label>\r\n                <select\r\n                  id=\"deliveryPreference\"\r\n                  className=\"form-select\"\r\n                  value={deliveryPreference}\r\n                  onChange={(e) => setDeliveryPreference(e.target.value)}\r\n                >\r\n                  <option value=\"normal\">Normal (Free, 7 Days)</option>\r\n                  <option value=\"Fast\">Fast (Rs.50, 2 Days)</option>\r\n                </select>\r\n              </div>\r\n\r\n              <h6 className=\"text-end\">\r\n                Total: ₹\r\n                {(\r\n                  parseFloat(totalAmount) +\r\n                  (deliveryPreference === \"Fast\" ? 50 : 0)\r\n                ).toFixed(2)}\r\n              </h6>\r\n\r\n              <button\r\n                style={{\r\n                  width: \"100%\",\r\n                  backgroundColor: \"#fb641b\",\r\n                  color: \"#fff\",\r\n                  border: \"none\",\r\n                  borderRadius: \"2px\",\r\n                  padding: \"12px 0\",\r\n                  fontSize: \"16px\",\r\n                  fontWeight: \"bold\",\r\n                  boxShadow: \"0 1px 2px 0 rgba(0, 0, 0, 0.2)\",\r\n                  cursor: \"pointer\",\r\n                  marginTop: \"16px\",\r\n                }}\r\n                onClick={placeOrder}\r\n              >\r\n                PLACE ORDER\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewAddtocart;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}