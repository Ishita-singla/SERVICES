{"ast":null,"code":"// import { useState, useContext } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// // import { CartContext } from './CartContext';\n\n// const Checkout = () => {\n// //   const { userId } = useParams();\n// const userId = localStorage.getItem(\"USER\");\n\n//   const [cartItems, setCartItems] = useState([]);\n\n// //   const { cartItems, clearCart } = useContext(CartContext);\n//   const navigate = useNavigate();\n\n//   const [address, setAddress] = useState({\n//     name: '',\n//     street: '',\n//     city: '',\n//     postalCode: '',\n//     country: ''\n//   });\n//   const clearCart = () => {\n//     setCartItems([]);\n//   };\n\n//   const handleChange = (e) => {\n//     setAddress({ ...address, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     console.log(\"Submit clicked âœ…\"); // ðŸ‘ˆ ye line lagao\n\n//     console.log(\"Cart Items:\", cartItems); // ðŸ‘ˆ Check this\n//     if (cartItems.length === 0) {\n//       alert(\"Cart is empty!\");\n//       return;\n//     }\n\n//     const totalAmount = cartItems.reduce((acc, item) => acc + (item.price * item.quantity), 0);\n//     const items = cartItems.map(item => ({\n//       productId: item._id,\n//       quantity: item.quantity\n//     }));\n\n//     // Step 1: Create Order\n//   const orderRes = await fetch('http://localhost:5001/placeorder', {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ userId, items, shippingAddress: address, totalAmount })\n//   });\n\n//   const orderData = await orderRes.json();\n//   if (orderRes.ok) {\n//     // Step 2: Open Razorpay Payment Window\n//     const options = {\n//       key: 'rzp_test_99IwqPHWTFKkXS', // ðŸ”¥ Replace with your real Razorpay key\n//       amount: totalAmount * 100, // Amount in paise\n//       currency: \"INR\",\n//       name: \"Softwizz\",\n//       description: \"Order Payment\",\n//       handler: async function (response) {\n//         // Payment successful\n\n//         // Step 3: Update backend with payment success\n//         const paymentRes = await fetch(`http://localhost:5001/updatepayment/${orderData._id}`, {\n//           method: 'PUT',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify({\n//             paymentId: response.razorpay_payment_id,\n//             paymentStatus: 'Paid'\n//           })\n//         });\n\n//         if (paymentRes.ok) {\n//           alert('Payment Successful!');\n//           clearCart();\n//           navigate('/'); // or Thank You page\n//         } else {\n//           alert('Payment captured but failed to update order.');\n//         }\n//       },\n//       prefill: {\n//         name: address.name,\n//         email: 'user@example.com', // optional\n//         contact: '9999999999' // optional\n//       },\n//       theme: {\n//         color: \"#3399cc\"\n//       }\n//     };\n\n//     const rzp = new window.Razorpay(options);\n//     rzp.open();\n//   } else {\n//     alert('Failed to create order. Try again.');\n//   }\n// };\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <h2 className=\"mb-4\">Checkout</h2>\n//       <form className=\"row g-3\" onSubmit={handleSubmit}>\n//         <div className=\"col-md-6\">\n//           <label htmlFor=\"name\" className=\"form-label\">Full Name</label>\n//           <input type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-12\">\n//           <label htmlFor=\"street\" className=\"form-label\">Street Address</label>\n//           <input type=\"text\" className=\"form-control\" id=\"street\" name=\"street\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-md-6\">\n//           <label htmlFor=\"city\" className=\"form-label\">City</label>\n//           <input type=\"text\" className=\"form-control\" id=\"city\" name=\"city\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-md-4\">\n//           <label htmlFor=\"postalCode\" className=\"form-label\">Postal Code</label>\n//           <input type=\"text\" className=\"form-control\" id=\"postalCode\" name=\"postalCode\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-md-2\">\n//           <label htmlFor=\"country\" className=\"form-label\">Country</label>\n//           <input type=\"text\" className=\"form-control\" id=\"country\" name=\"country\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-12\">\n//           <button type=\"submit\" className=\"btn btn-primary w-100\">Submit Order</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Checkout;\n// import { useEffect, useState } from 'react';\n// import { useNavigate,useLocation } from 'react-router-dom';\n\n// const Checkout = () => {\n//   const location = useLocation();\n//   const { deliveryPreference, totalAmount, finalAmount } = location.state || {};\n\n//   const userId = localStorage.getItem(\"USER\");  // USER ID get karo\n//   localStorage.setItem(\"cart_\" + userId, JSON.stringify(cartData)); // cart ko userId ke saath store karo\n\n//   const navigate = useNavigate();\n\n//   const [cartItems, setCartItems] = useState([]);\n//   const [address, setAddress] = useState({\n//     name: '',\n//     street: '',\n//     city: '',\n//     postalCode: '',\n//     country: ''\n//   });\n//   useEffect(() => {\n//     const userId = localStorage.getItem(\"USER\");\n//     const storedCart = localStorage.getItem(\"cart_\" + userId);\n//     if (storedCart) {\n//       setCartItems(JSON.parse(storedCart));\n//     }\n//   }, []);\n\n//   // âœ… Load cart from localStorage\n//   useEffect(() => {\n//     if (userId) {\n//       const savedCart = localStorage.getItem(`cart_${userId}`);\n//       if (savedCart) {\n//         try {\n//           setCartItems(JSON.parse(savedCart));\n//         } catch (err) {\n//           console.error(\"Failed to parse cart JSON\", err);\n//         }\n//       }\n//     }\n//   }, [userId]);\n\n//   // const clearCart = () => {\n//   //   localStorage.removeItem(`cart_${userId}`);\n//   //   setCartItems([]);\n//   // };\n//   const clearCart = () => {\n//     const userId = localStorage.getItem(\"USER\");\n//     localStorage.removeItem(\"cart_\" + userId);\n//     localStorage.setItem(\"cartcount\", 0);\n//     window.dispatchEvent(new Event(\"storage\"));\n//     setCartItems([]);\n//   };\n\n//   const handleChange = (e) => {\n//     setAddress({ ...address, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     console.log(\"Submit clicked âœ…\");\n//     console.log(\"Cart Items:\", cartItems);\n\n//     if (cartItems.length === 0) {\n//       alert(\"Cart is empty!\");\n//       return;\n//     }\n\n//     const totalAmount = cartItems.reduce((acc, item) => acc + (item.price * item.quantity), 0);\n\n//     // Step 1: Place order\n//     // const orderRes = await fetch('http://localhost:5001/placeorder', {\n//     //   method: 'POST',\n//     //   headers: { 'Content-Type': 'application/json' },\n//     //   body: JSON.stringify({\n//     //     userId,\n//     //     cartItems, // sending full cartItems as per your Mongoose schema\n//     //     shippingAddress: address,\n//     //     totalAmount\n//     //   })\n//     // });\n\n//     const orderRes = await fetch('http://localhost:5001/placeorder', {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({\n//         userId,\n//         cartItems,\n//         shippingAddress: address,\n//         deliveryPreference,\n//         totalAmount: finalAmount\n//       })\n//     });\n\n//     const orderData = await orderRes.json();\n\n//     if (orderRes.ok) {\n//       const options = {\n//         key: 'rzp_test_99IwqPHWTFKkXS',\n//         amount: finalAmount * 100,\n//         currency: \"INR\",\n//         name: \"Softwizz\",\n//         description: \"Order Payment\",\n//         handler: async function (response) {\n//           const paymentRes = await fetch(`http://localhost:5001/updatepayment/${orderData._id}`, {\n//             method: 'PUT',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify({\n//               paymentId: response.razorpay_payment_id,\n//               paymentStatus: 'Paid'\n//             })\n//           });\n\n//           if (paymentRes.ok) {\n//             alert('Payment Successful!');\n//             clearCart();\n//             localStorage.setItem(\"cartcount\", 0);\n// window.dispatchEvent(new Event(\"storage\"));\n// navigate(\"/thankyou\"); // or redirect wherever you want\n\n//           } else {\n//             alert('Payment captured but failed to update order.');\n//           }\n//         },\n//         prefill: {\n//           name: address.name,\n//           email: 'user@example.com',\n//           contact: '9999999999'\n//         },\n//         theme: {\n//           color: \"#3399cc\"\n//         }\n//       };\n\n//       const rzp = new window.Razorpay(options);\n//       rzp.open();\n//     } else {\n//       alert('Failed to create order. Try again.');\n//     }\n//   };\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <h2 className=\"mb-4\">Checkout</h2>\n//       {cartItems.length > 0 ? (\n//         cartItems.map((item, index) => (\n//           <div key={index}>\n//             <p>Product: {item.productName}</p>\n//             <p>Quantity: {item.quantity}</p>\n//           </div>\n//         ))\n//       ) : (\n//         <p>Your cart is empty.</p>\n//       )}\n//       <form className=\"row g-3\" onSubmit={handleSubmit}>\n//         <div className=\"col-md-6\">\n//           <label htmlFor=\"name\" className=\"form-label\">Full Name</label>\n//           <input type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-12\">\n//           <label htmlFor=\"street\" className=\"form-label\">Street Address</label>\n//           <input type=\"text\" className=\"form-control\" id=\"street\" name=\"street\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-md-6\">\n//           <label htmlFor=\"city\" className=\"form-label\">City</label>\n//           <input type=\"text\" className=\"form-control\" id=\"city\" name=\"city\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-md-4\">\n//           <label htmlFor=\"postalCode\" className=\"form-label\">Postal Code</label>\n//           <input type=\"text\" className=\"form-control\" id=\"postalCode\" name=\"postalCode\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-md-2\">\n//           <label htmlFor=\"country\" className=\"form-label\">Country</label>\n//           <input type=\"text\" className=\"form-control\" id=\"country\" name=\"country\" onChange={handleChange} required />\n//         </div>\n\n//         <div className=\"col-12\">\n//           <button type=\"submit\" className=\"btn btn-primary w-100\">Submit Order</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Checkout;","map":{"version":3,"names":[],"sources":["C:/Users/HP/Desktop/serviceProject/frontend/src/components/CheckOut.js"],"sourcesContent":["// import { useState, useContext } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// // import { CartContext } from './CartContext';\r\n\r\n// const Checkout = () => {\r\n// //   const { userId } = useParams();\r\n// const userId = localStorage.getItem(\"USER\");\r\n\r\n//   const [cartItems, setCartItems] = useState([]);\r\n\r\n// //   const { cartItems, clearCart } = useContext(CartContext);\r\n//   const navigate = useNavigate();\r\n  \r\n//   const [address, setAddress] = useState({\r\n//     name: '',\r\n//     street: '',\r\n//     city: '',\r\n//     postalCode: '',\r\n//     country: ''\r\n//   });\r\n//   const clearCart = () => {\r\n//     setCartItems([]);\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     setAddress({ ...address, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"Submit clicked âœ…\"); // ðŸ‘ˆ ye line lagao\r\n\r\n\r\n//     console.log(\"Cart Items:\", cartItems); // ðŸ‘ˆ Check this\r\n//     if (cartItems.length === 0) {\r\n//       alert(\"Cart is empty!\");\r\n//       return;\r\n//     }\r\n  \r\n\r\n//     const totalAmount = cartItems.reduce((acc, item) => acc + (item.price * item.quantity), 0);\r\n//     const items = cartItems.map(item => ({\r\n//       productId: item._id,\r\n//       quantity: item.quantity\r\n//     }));\r\n\r\n//     // Step 1: Create Order\r\n//   const orderRes = await fetch('http://localhost:5001/placeorder', {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({ userId, items, shippingAddress: address, totalAmount })\r\n//   });\r\n\r\n//   const orderData = await orderRes.json();\r\n//   if (orderRes.ok) {\r\n//     // Step 2: Open Razorpay Payment Window\r\n//     const options = {\r\n//       key: 'rzp_test_99IwqPHWTFKkXS', // ðŸ”¥ Replace with your real Razorpay key\r\n//       amount: totalAmount * 100, // Amount in paise\r\n//       currency: \"INR\",\r\n//       name: \"Softwizz\",\r\n//       description: \"Order Payment\",\r\n//       handler: async function (response) {\r\n//         // Payment successful\r\n\r\n//         // Step 3: Update backend with payment success\r\n//         const paymentRes = await fetch(`http://localhost:5001/updatepayment/${orderData._id}`, {\r\n//           method: 'PUT',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           body: JSON.stringify({\r\n//             paymentId: response.razorpay_payment_id,\r\n//             paymentStatus: 'Paid'\r\n//           })\r\n//         });\r\n\r\n//         if (paymentRes.ok) {\r\n//           alert('Payment Successful!');\r\n//           clearCart();\r\n//           navigate('/'); // or Thank You page\r\n//         } else {\r\n//           alert('Payment captured but failed to update order.');\r\n//         }\r\n//       },\r\n//       prefill: {\r\n//         name: address.name,\r\n//         email: 'user@example.com', // optional\r\n//         contact: '9999999999' // optional\r\n//       },\r\n//       theme: {\r\n//         color: \"#3399cc\"\r\n//       }\r\n//     };\r\n    \r\n//     const rzp = new window.Razorpay(options);\r\n//     rzp.open();\r\n//   } else {\r\n//     alert('Failed to create order. Try again.');\r\n//   }\r\n// };\r\n\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h2 className=\"mb-4\">Checkout</h2>\r\n//       <form className=\"row g-3\" onSubmit={handleSubmit}>\r\n//         <div className=\"col-md-6\">\r\n//           <label htmlFor=\"name\" className=\"form-label\">Full Name</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" onChange={handleChange} required />\r\n//         </div>\r\n        \r\n//         <div className=\"col-12\">\r\n//           <label htmlFor=\"street\" className=\"form-label\">Street Address</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"street\" name=\"street\" onChange={handleChange} required />\r\n//         </div>\r\n        \r\n//         <div className=\"col-md-6\">\r\n//           <label htmlFor=\"city\" className=\"form-label\">City</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"city\" name=\"city\" onChange={handleChange} required />\r\n//         </div>\r\n        \r\n//         <div className=\"col-md-4\">\r\n//           <label htmlFor=\"postalCode\" className=\"form-label\">Postal Code</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"postalCode\" name=\"postalCode\" onChange={handleChange} required />\r\n//         </div>\r\n        \r\n//         <div className=\"col-md-2\">\r\n//           <label htmlFor=\"country\" className=\"form-label\">Country</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"country\" name=\"country\" onChange={handleChange} required />\r\n//         </div>\r\n\r\n//         <div className=\"col-12\">\r\n//           <button type=\"submit\" className=\"btn btn-primary w-100\">Submit Order</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Checkout;\r\n// import { useEffect, useState } from 'react';\r\n// import { useNavigate,useLocation } from 'react-router-dom';\r\n\r\n// const Checkout = () => {\r\n//   const location = useLocation();\r\n//   const { deliveryPreference, totalAmount, finalAmount } = location.state || {};\r\n\r\n//   const userId = localStorage.getItem(\"USER\");  // USER ID get karo\r\n//   localStorage.setItem(\"cart_\" + userId, JSON.stringify(cartData)); // cart ko userId ke saath store karo\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const [cartItems, setCartItems] = useState([]);\r\n//   const [address, setAddress] = useState({\r\n//     name: '',\r\n//     street: '',\r\n//     city: '',\r\n//     postalCode: '',\r\n//     country: ''\r\n//   });\r\n//   useEffect(() => {\r\n//     const userId = localStorage.getItem(\"USER\");\r\n//     const storedCart = localStorage.getItem(\"cart_\" + userId);\r\n//     if (storedCart) {\r\n//       setCartItems(JSON.parse(storedCart));\r\n//     }\r\n//   }, []);\r\n  \r\n\r\n//   // âœ… Load cart from localStorage\r\n//   useEffect(() => {\r\n//     if (userId) {\r\n//       const savedCart = localStorage.getItem(`cart_${userId}`);\r\n//       if (savedCart) {\r\n//         try {\r\n//           setCartItems(JSON.parse(savedCart));\r\n//         } catch (err) {\r\n//           console.error(\"Failed to parse cart JSON\", err);\r\n//         }\r\n//       }\r\n//     }\r\n//   }, [userId]);\r\n\r\n//   // const clearCart = () => {\r\n//   //   localStorage.removeItem(`cart_${userId}`);\r\n//   //   setCartItems([]);\r\n//   // };\r\n//   const clearCart = () => {\r\n//     const userId = localStorage.getItem(\"USER\");\r\n//     localStorage.removeItem(\"cart_\" + userId);\r\n//     localStorage.setItem(\"cartcount\", 0);\r\n//     window.dispatchEvent(new Event(\"storage\"));\r\n//     setCartItems([]);\r\n//   };\r\n  \r\n\r\n//   const handleChange = (e) => {\r\n//     setAddress({ ...address, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"Submit clicked âœ…\");\r\n//     console.log(\"Cart Items:\", cartItems);\r\n\r\n//     if (cartItems.length === 0) {\r\n//       alert(\"Cart is empty!\");\r\n//       return;\r\n//     }\r\n\r\n//     const totalAmount = cartItems.reduce((acc, item) => acc + (item.price * item.quantity), 0);\r\n\r\n//     // Step 1: Place order\r\n//     // const orderRes = await fetch('http://localhost:5001/placeorder', {\r\n//     //   method: 'POST',\r\n//     //   headers: { 'Content-Type': 'application/json' },\r\n//     //   body: JSON.stringify({\r\n//     //     userId,\r\n//     //     cartItems, // sending full cartItems as per your Mongoose schema\r\n//     //     shippingAddress: address,\r\n//     //     totalAmount\r\n//     //   })\r\n//     // });\r\n\r\n//     const orderRes = await fetch('http://localhost:5001/placeorder', {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify({\r\n//         userId,\r\n//         cartItems,\r\n//         shippingAddress: address,\r\n//         deliveryPreference,\r\n//         totalAmount: finalAmount\r\n//       })\r\n//     });\r\n    \r\n//     const orderData = await orderRes.json();\r\n\r\n//     if (orderRes.ok) {\r\n//       const options = {\r\n//         key: 'rzp_test_99IwqPHWTFKkXS',\r\n//         amount: finalAmount * 100,\r\n//         currency: \"INR\",\r\n//         name: \"Softwizz\",\r\n//         description: \"Order Payment\",\r\n//         handler: async function (response) {\r\n//           const paymentRes = await fetch(`http://localhost:5001/updatepayment/${orderData._id}`, {\r\n//             method: 'PUT',\r\n//             headers: { 'Content-Type': 'application/json' },\r\n//             body: JSON.stringify({\r\n//               paymentId: response.razorpay_payment_id,\r\n//               paymentStatus: 'Paid'\r\n//             })\r\n//           });\r\n\r\n//           if (paymentRes.ok) {\r\n//             alert('Payment Successful!');\r\n//             clearCart();\r\n//             localStorage.setItem(\"cartcount\", 0);\r\n// window.dispatchEvent(new Event(\"storage\"));\r\n// navigate(\"/thankyou\"); // or redirect wherever you want\r\n           \r\n//           } else {\r\n//             alert('Payment captured but failed to update order.');\r\n//           }\r\n//         },\r\n//         prefill: {\r\n//           name: address.name,\r\n//           email: 'user@example.com',\r\n//           contact: '9999999999'\r\n//         },\r\n//         theme: {\r\n//           color: \"#3399cc\"\r\n//         }\r\n//       };\r\n\r\n//       const rzp = new window.Razorpay(options);\r\n//       rzp.open();\r\n//     } else {\r\n//       alert('Failed to create order. Try again.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h2 className=\"mb-4\">Checkout</h2>\r\n//       {cartItems.length > 0 ? (\r\n//         cartItems.map((item, index) => (\r\n//           <div key={index}>\r\n//             <p>Product: {item.productName}</p>\r\n//             <p>Quantity: {item.quantity}</p>\r\n//           </div>\r\n//         ))\r\n//       ) : (\r\n//         <p>Your cart is empty.</p>\r\n//       )}\r\n//       <form className=\"row g-3\" onSubmit={handleSubmit}>\r\n//         <div className=\"col-md-6\">\r\n//           <label htmlFor=\"name\" className=\"form-label\">Full Name</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" onChange={handleChange} required />\r\n//         </div>\r\n\r\n//         <div className=\"col-12\">\r\n//           <label htmlFor=\"street\" className=\"form-label\">Street Address</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"street\" name=\"street\" onChange={handleChange} required />\r\n//         </div>\r\n\r\n//         <div className=\"col-md-6\">\r\n//           <label htmlFor=\"city\" className=\"form-label\">City</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"city\" name=\"city\" onChange={handleChange} required />\r\n//         </div>\r\n\r\n//         <div className=\"col-md-4\">\r\n//           <label htmlFor=\"postalCode\" className=\"form-label\">Postal Code</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"postalCode\" name=\"postalCode\" onChange={handleChange} required />\r\n//         </div>\r\n\r\n//         <div className=\"col-md-2\">\r\n//           <label htmlFor=\"country\" className=\"form-label\">Country</label>\r\n//           <input type=\"text\" className=\"form-control\" id=\"country\" name=\"country\" onChange={handleChange} required />\r\n//         </div>\r\n\r\n//         <div className=\"col-12\">\r\n//           <button type=\"submit\" className=\"btn btn-primary w-100\">Submit Order</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Checkout;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}